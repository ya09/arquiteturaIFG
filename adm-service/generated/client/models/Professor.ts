
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Professor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Professor
 * 
 */
export type ProfessorModel = runtime.Types.Result.DefaultSelection<Prisma.$ProfessorPayload>

export type AggregateProfessor = {
  _count: ProfessorCountAggregateOutputType | null
  _avg: ProfessorAvgAggregateOutputType | null
  _sum: ProfessorSumAggregateOutputType | null
  _min: ProfessorMinAggregateOutputType | null
  _max: ProfessorMaxAggregateOutputType | null
}

export type ProfessorAvgAggregateOutputType = {
  id: number | null
}

export type ProfessorSumAggregateOutputType = {
  id: number | null
}

export type ProfessorMinAggregateOutputType = {
  id: number | null
  nome: string | null
  email: string | null
  password: string | null
}

export type ProfessorMaxAggregateOutputType = {
  id: number | null
  nome: string | null
  email: string | null
  password: string | null
}

export type ProfessorCountAggregateOutputType = {
  id: number
  nome: number
  email: number
  password: number
  _all: number
}


export type ProfessorAvgAggregateInputType = {
  id?: true
}

export type ProfessorSumAggregateInputType = {
  id?: true
}

export type ProfessorMinAggregateInputType = {
  id?: true
  nome?: true
  email?: true
  password?: true
}

export type ProfessorMaxAggregateInputType = {
  id?: true
  nome?: true
  email?: true
  password?: true
}

export type ProfessorCountAggregateInputType = {
  id?: true
  nome?: true
  email?: true
  password?: true
  _all?: true
}

export type ProfessorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Professor to aggregate.
   */
  where?: Prisma.ProfessorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Professors to fetch.
   */
  orderBy?: Prisma.ProfessorOrderByWithRelationInput | Prisma.ProfessorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProfessorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Professors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Professors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Professors
  **/
  _count?: true | ProfessorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProfessorAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProfessorSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProfessorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProfessorMaxAggregateInputType
}

export type GetProfessorAggregateType<T extends ProfessorAggregateArgs> = {
      [P in keyof T & keyof AggregateProfessor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProfessor[P]>
    : Prisma.GetScalarType<T[P], AggregateProfessor[P]>
}




export type ProfessorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProfessorWhereInput
  orderBy?: Prisma.ProfessorOrderByWithAggregationInput | Prisma.ProfessorOrderByWithAggregationInput[]
  by: Prisma.ProfessorScalarFieldEnum[] | Prisma.ProfessorScalarFieldEnum
  having?: Prisma.ProfessorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProfessorCountAggregateInputType | true
  _avg?: ProfessorAvgAggregateInputType
  _sum?: ProfessorSumAggregateInputType
  _min?: ProfessorMinAggregateInputType
  _max?: ProfessorMaxAggregateInputType
}

export type ProfessorGroupByOutputType = {
  id: number
  nome: string
  email: string
  password: string
  _count: ProfessorCountAggregateOutputType | null
  _avg: ProfessorAvgAggregateOutputType | null
  _sum: ProfessorSumAggregateOutputType | null
  _min: ProfessorMinAggregateOutputType | null
  _max: ProfessorMaxAggregateOutputType | null
}

type GetProfessorGroupByPayload<T extends ProfessorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProfessorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProfessorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProfessorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProfessorGroupByOutputType[P]>
      }
    >
  > 



export type ProfessorWhereInput = {
  AND?: Prisma.ProfessorWhereInput | Prisma.ProfessorWhereInput[]
  OR?: Prisma.ProfessorWhereInput[]
  NOT?: Prisma.ProfessorWhereInput | Prisma.ProfessorWhereInput[]
  id?: Prisma.IntFilter<"Professor"> | number
  nome?: Prisma.StringFilter<"Professor"> | string
  email?: Prisma.StringFilter<"Professor"> | string
  password?: Prisma.StringFilter<"Professor"> | string
  notas?: Prisma.NotaListRelationFilter
  disciplinas?: Prisma.DisciplinaListRelationFilter
}

export type ProfessorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  notas?: Prisma.NotaOrderByRelationAggregateInput
  disciplinas?: Prisma.DisciplinaOrderByRelationAggregateInput
  _relevance?: Prisma.ProfessorOrderByRelevanceInput
}

export type ProfessorWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  email?: string
  AND?: Prisma.ProfessorWhereInput | Prisma.ProfessorWhereInput[]
  OR?: Prisma.ProfessorWhereInput[]
  NOT?: Prisma.ProfessorWhereInput | Prisma.ProfessorWhereInput[]
  nome?: Prisma.StringFilter<"Professor"> | string
  password?: Prisma.StringFilter<"Professor"> | string
  notas?: Prisma.NotaListRelationFilter
  disciplinas?: Prisma.DisciplinaListRelationFilter
}, "id" | "email">

export type ProfessorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
  _count?: Prisma.ProfessorCountOrderByAggregateInput
  _avg?: Prisma.ProfessorAvgOrderByAggregateInput
  _max?: Prisma.ProfessorMaxOrderByAggregateInput
  _min?: Prisma.ProfessorMinOrderByAggregateInput
  _sum?: Prisma.ProfessorSumOrderByAggregateInput
}

export type ProfessorScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProfessorScalarWhereWithAggregatesInput | Prisma.ProfessorScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProfessorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProfessorScalarWhereWithAggregatesInput | Prisma.ProfessorScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Professor"> | number
  nome?: Prisma.StringWithAggregatesFilter<"Professor"> | string
  email?: Prisma.StringWithAggregatesFilter<"Professor"> | string
  password?: Prisma.StringWithAggregatesFilter<"Professor"> | string
}

export type ProfessorCreateInput = {
  nome: string
  email: string
  password: string
  notas?: Prisma.NotaCreateNestedManyWithoutProfessorInput
  disciplinas?: Prisma.DisciplinaCreateNestedManyWithoutProfessorInput
}

export type ProfessorUncheckedCreateInput = {
  id?: number
  nome: string
  email: string
  password: string
  notas?: Prisma.NotaUncheckedCreateNestedManyWithoutProfessorInput
  disciplinas?: Prisma.DisciplinaUncheckedCreateNestedManyWithoutProfessorInput
}

export type ProfessorUpdateInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  notas?: Prisma.NotaUpdateManyWithoutProfessorNestedInput
  disciplinas?: Prisma.DisciplinaUpdateManyWithoutProfessorNestedInput
}

export type ProfessorUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  notas?: Prisma.NotaUncheckedUpdateManyWithoutProfessorNestedInput
  disciplinas?: Prisma.DisciplinaUncheckedUpdateManyWithoutProfessorNestedInput
}

export type ProfessorCreateManyInput = {
  id?: number
  nome: string
  email: string
  password: string
}

export type ProfessorUpdateManyMutationInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProfessorUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ProfessorOrderByRelevanceInput = {
  fields: Prisma.ProfessorOrderByRelevanceFieldEnum | Prisma.ProfessorOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ProfessorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
}

export type ProfessorAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProfessorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
}

export type ProfessorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  email?: Prisma.SortOrder
  password?: Prisma.SortOrder
}

export type ProfessorSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type ProfessorNullableScalarRelationFilter = {
  is?: Prisma.ProfessorWhereInput | null
  isNot?: Prisma.ProfessorWhereInput | null
}

export type ProfessorScalarRelationFilter = {
  is?: Prisma.ProfessorWhereInput
  isNot?: Prisma.ProfessorWhereInput
}

export type ProfessorCreateNestedOneWithoutDisciplinasInput = {
  create?: Prisma.XOR<Prisma.ProfessorCreateWithoutDisciplinasInput, Prisma.ProfessorUncheckedCreateWithoutDisciplinasInput>
  connectOrCreate?: Prisma.ProfessorCreateOrConnectWithoutDisciplinasInput
  connect?: Prisma.ProfessorWhereUniqueInput
}

export type ProfessorUpdateOneWithoutDisciplinasNestedInput = {
  create?: Prisma.XOR<Prisma.ProfessorCreateWithoutDisciplinasInput, Prisma.ProfessorUncheckedCreateWithoutDisciplinasInput>
  connectOrCreate?: Prisma.ProfessorCreateOrConnectWithoutDisciplinasInput
  upsert?: Prisma.ProfessorUpsertWithoutDisciplinasInput
  disconnect?: Prisma.ProfessorWhereInput | boolean
  delete?: Prisma.ProfessorWhereInput | boolean
  connect?: Prisma.ProfessorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProfessorUpdateToOneWithWhereWithoutDisciplinasInput, Prisma.ProfessorUpdateWithoutDisciplinasInput>, Prisma.ProfessorUncheckedUpdateWithoutDisciplinasInput>
}

export type ProfessorCreateNestedOneWithoutNotasInput = {
  create?: Prisma.XOR<Prisma.ProfessorCreateWithoutNotasInput, Prisma.ProfessorUncheckedCreateWithoutNotasInput>
  connectOrCreate?: Prisma.ProfessorCreateOrConnectWithoutNotasInput
  connect?: Prisma.ProfessorWhereUniqueInput
}

export type ProfessorUpdateOneRequiredWithoutNotasNestedInput = {
  create?: Prisma.XOR<Prisma.ProfessorCreateWithoutNotasInput, Prisma.ProfessorUncheckedCreateWithoutNotasInput>
  connectOrCreate?: Prisma.ProfessorCreateOrConnectWithoutNotasInput
  upsert?: Prisma.ProfessorUpsertWithoutNotasInput
  connect?: Prisma.ProfessorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProfessorUpdateToOneWithWhereWithoutNotasInput, Prisma.ProfessorUpdateWithoutNotasInput>, Prisma.ProfessorUncheckedUpdateWithoutNotasInput>
}

export type ProfessorCreateWithoutDisciplinasInput = {
  nome: string
  email: string
  password: string
  notas?: Prisma.NotaCreateNestedManyWithoutProfessorInput
}

export type ProfessorUncheckedCreateWithoutDisciplinasInput = {
  id?: number
  nome: string
  email: string
  password: string
  notas?: Prisma.NotaUncheckedCreateNestedManyWithoutProfessorInput
}

export type ProfessorCreateOrConnectWithoutDisciplinasInput = {
  where: Prisma.ProfessorWhereUniqueInput
  create: Prisma.XOR<Prisma.ProfessorCreateWithoutDisciplinasInput, Prisma.ProfessorUncheckedCreateWithoutDisciplinasInput>
}

export type ProfessorUpsertWithoutDisciplinasInput = {
  update: Prisma.XOR<Prisma.ProfessorUpdateWithoutDisciplinasInput, Prisma.ProfessorUncheckedUpdateWithoutDisciplinasInput>
  create: Prisma.XOR<Prisma.ProfessorCreateWithoutDisciplinasInput, Prisma.ProfessorUncheckedCreateWithoutDisciplinasInput>
  where?: Prisma.ProfessorWhereInput
}

export type ProfessorUpdateToOneWithWhereWithoutDisciplinasInput = {
  where?: Prisma.ProfessorWhereInput
  data: Prisma.XOR<Prisma.ProfessorUpdateWithoutDisciplinasInput, Prisma.ProfessorUncheckedUpdateWithoutDisciplinasInput>
}

export type ProfessorUpdateWithoutDisciplinasInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  notas?: Prisma.NotaUpdateManyWithoutProfessorNestedInput
}

export type ProfessorUncheckedUpdateWithoutDisciplinasInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  notas?: Prisma.NotaUncheckedUpdateManyWithoutProfessorNestedInput
}

export type ProfessorCreateWithoutNotasInput = {
  nome: string
  email: string
  password: string
  disciplinas?: Prisma.DisciplinaCreateNestedManyWithoutProfessorInput
}

export type ProfessorUncheckedCreateWithoutNotasInput = {
  id?: number
  nome: string
  email: string
  password: string
  disciplinas?: Prisma.DisciplinaUncheckedCreateNestedManyWithoutProfessorInput
}

export type ProfessorCreateOrConnectWithoutNotasInput = {
  where: Prisma.ProfessorWhereUniqueInput
  create: Prisma.XOR<Prisma.ProfessorCreateWithoutNotasInput, Prisma.ProfessorUncheckedCreateWithoutNotasInput>
}

export type ProfessorUpsertWithoutNotasInput = {
  update: Prisma.XOR<Prisma.ProfessorUpdateWithoutNotasInput, Prisma.ProfessorUncheckedUpdateWithoutNotasInput>
  create: Prisma.XOR<Prisma.ProfessorCreateWithoutNotasInput, Prisma.ProfessorUncheckedCreateWithoutNotasInput>
  where?: Prisma.ProfessorWhereInput
}

export type ProfessorUpdateToOneWithWhereWithoutNotasInput = {
  where?: Prisma.ProfessorWhereInput
  data: Prisma.XOR<Prisma.ProfessorUpdateWithoutNotasInput, Prisma.ProfessorUncheckedUpdateWithoutNotasInput>
}

export type ProfessorUpdateWithoutNotasInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  disciplinas?: Prisma.DisciplinaUpdateManyWithoutProfessorNestedInput
}

export type ProfessorUncheckedUpdateWithoutNotasInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  disciplinas?: Prisma.DisciplinaUncheckedUpdateManyWithoutProfessorNestedInput
}


/**
 * Count Type ProfessorCountOutputType
 */

export type ProfessorCountOutputType = {
  notas: number
  disciplinas: number
}

export type ProfessorCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  notas?: boolean | ProfessorCountOutputTypeCountNotasArgs
  disciplinas?: boolean | ProfessorCountOutputTypeCountDisciplinasArgs
}

/**
 * ProfessorCountOutputType without action
 */
export type ProfessorCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfessorCountOutputType
   */
  select?: Prisma.ProfessorCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProfessorCountOutputType without action
 */
export type ProfessorCountOutputTypeCountNotasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotaWhereInput
}

/**
 * ProfessorCountOutputType without action
 */
export type ProfessorCountOutputTypeCountDisciplinasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DisciplinaWhereInput
}


export type ProfessorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nome?: boolean
  email?: boolean
  password?: boolean
  notas?: boolean | Prisma.Professor$notasArgs<ExtArgs>
  disciplinas?: boolean | Prisma.Professor$disciplinasArgs<ExtArgs>
  _count?: boolean | Prisma.ProfessorCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["professor"]>



export type ProfessorSelectScalar = {
  id?: boolean
  nome?: boolean
  email?: boolean
  password?: boolean
}

export type ProfessorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nome" | "email" | "password", ExtArgs["result"]["professor"]>
export type ProfessorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  notas?: boolean | Prisma.Professor$notasArgs<ExtArgs>
  disciplinas?: boolean | Prisma.Professor$disciplinasArgs<ExtArgs>
  _count?: boolean | Prisma.ProfessorCountOutputTypeDefaultArgs<ExtArgs>
}

export type $ProfessorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Professor"
  objects: {
    notas: Prisma.$NotaPayload<ExtArgs>[]
    disciplinas: Prisma.$DisciplinaPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nome: string
    email: string
    password: string
  }, ExtArgs["result"]["professor"]>
  composites: {}
}

export type ProfessorGetPayload<S extends boolean | null | undefined | ProfessorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProfessorPayload, S>

export type ProfessorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProfessorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProfessorCountAggregateInputType | true
  }

export interface ProfessorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Professor'], meta: { name: 'Professor' } }
  /**
   * Find zero or one Professor that matches the filter.
   * @param {ProfessorFindUniqueArgs} args - Arguments to find a Professor
   * @example
   * // Get one Professor
   * const professor = await prisma.professor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProfessorFindUniqueArgs>(args: Prisma.SelectSubset<T, ProfessorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProfessorClient<runtime.Types.Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Professor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProfessorFindUniqueOrThrowArgs} args - Arguments to find a Professor
   * @example
   * // Get one Professor
   * const professor = await prisma.professor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProfessorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProfessorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProfessorClient<runtime.Types.Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Professor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfessorFindFirstArgs} args - Arguments to find a Professor
   * @example
   * // Get one Professor
   * const professor = await prisma.professor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProfessorFindFirstArgs>(args?: Prisma.SelectSubset<T, ProfessorFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProfessorClient<runtime.Types.Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Professor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfessorFindFirstOrThrowArgs} args - Arguments to find a Professor
   * @example
   * // Get one Professor
   * const professor = await prisma.professor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProfessorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProfessorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProfessorClient<runtime.Types.Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Professors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfessorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Professors
   * const professors = await prisma.professor.findMany()
   * 
   * // Get first 10 Professors
   * const professors = await prisma.professor.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const professorWithIdOnly = await prisma.professor.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProfessorFindManyArgs>(args?: Prisma.SelectSubset<T, ProfessorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Professor.
   * @param {ProfessorCreateArgs} args - Arguments to create a Professor.
   * @example
   * // Create one Professor
   * const Professor = await prisma.professor.create({
   *   data: {
   *     // ... data to create a Professor
   *   }
   * })
   * 
   */
  create<T extends ProfessorCreateArgs>(args: Prisma.SelectSubset<T, ProfessorCreateArgs<ExtArgs>>): Prisma.Prisma__ProfessorClient<runtime.Types.Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Professors.
   * @param {ProfessorCreateManyArgs} args - Arguments to create many Professors.
   * @example
   * // Create many Professors
   * const professor = await prisma.professor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProfessorCreateManyArgs>(args?: Prisma.SelectSubset<T, ProfessorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Professor.
   * @param {ProfessorDeleteArgs} args - Arguments to delete one Professor.
   * @example
   * // Delete one Professor
   * const Professor = await prisma.professor.delete({
   *   where: {
   *     // ... filter to delete one Professor
   *   }
   * })
   * 
   */
  delete<T extends ProfessorDeleteArgs>(args: Prisma.SelectSubset<T, ProfessorDeleteArgs<ExtArgs>>): Prisma.Prisma__ProfessorClient<runtime.Types.Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Professor.
   * @param {ProfessorUpdateArgs} args - Arguments to update one Professor.
   * @example
   * // Update one Professor
   * const professor = await prisma.professor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProfessorUpdateArgs>(args: Prisma.SelectSubset<T, ProfessorUpdateArgs<ExtArgs>>): Prisma.Prisma__ProfessorClient<runtime.Types.Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Professors.
   * @param {ProfessorDeleteManyArgs} args - Arguments to filter Professors to delete.
   * @example
   * // Delete a few Professors
   * const { count } = await prisma.professor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProfessorDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProfessorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Professors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfessorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Professors
   * const professor = await prisma.professor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProfessorUpdateManyArgs>(args: Prisma.SelectSubset<T, ProfessorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Professor.
   * @param {ProfessorUpsertArgs} args - Arguments to update or create a Professor.
   * @example
   * // Update or create a Professor
   * const professor = await prisma.professor.upsert({
   *   create: {
   *     // ... data to create a Professor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Professor we want to update
   *   }
   * })
   */
  upsert<T extends ProfessorUpsertArgs>(args: Prisma.SelectSubset<T, ProfessorUpsertArgs<ExtArgs>>): Prisma.Prisma__ProfessorClient<runtime.Types.Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Professors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfessorCountArgs} args - Arguments to filter Professors to count.
   * @example
   * // Count the number of Professors
   * const count = await prisma.professor.count({
   *   where: {
   *     // ... the filter for the Professors we want to count
   *   }
   * })
  **/
  count<T extends ProfessorCountArgs>(
    args?: Prisma.Subset<T, ProfessorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProfessorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Professor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfessorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProfessorAggregateArgs>(args: Prisma.Subset<T, ProfessorAggregateArgs>): Prisma.PrismaPromise<GetProfessorAggregateType<T>>

  /**
   * Group by Professor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfessorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProfessorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProfessorGroupByArgs['orderBy'] }
      : { orderBy?: ProfessorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProfessorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Professor model
 */
readonly fields: ProfessorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Professor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProfessorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  notas<T extends Prisma.Professor$notasArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Professor$notasArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  disciplinas<T extends Prisma.Professor$disciplinasArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Professor$disciplinasArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Professor model
 */
export interface ProfessorFieldRefs {
  readonly id: Prisma.FieldRef<"Professor", 'Int'>
  readonly nome: Prisma.FieldRef<"Professor", 'String'>
  readonly email: Prisma.FieldRef<"Professor", 'String'>
  readonly password: Prisma.FieldRef<"Professor", 'String'>
}
    

// Custom InputTypes
/**
 * Professor findUnique
 */
export type ProfessorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Professor
   */
  select?: Prisma.ProfessorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Professor
   */
  omit?: Prisma.ProfessorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfessorInclude<ExtArgs> | null
  /**
   * Filter, which Professor to fetch.
   */
  where: Prisma.ProfessorWhereUniqueInput
}

/**
 * Professor findUniqueOrThrow
 */
export type ProfessorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Professor
   */
  select?: Prisma.ProfessorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Professor
   */
  omit?: Prisma.ProfessorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfessorInclude<ExtArgs> | null
  /**
   * Filter, which Professor to fetch.
   */
  where: Prisma.ProfessorWhereUniqueInput
}

/**
 * Professor findFirst
 */
export type ProfessorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Professor
   */
  select?: Prisma.ProfessorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Professor
   */
  omit?: Prisma.ProfessorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfessorInclude<ExtArgs> | null
  /**
   * Filter, which Professor to fetch.
   */
  where?: Prisma.ProfessorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Professors to fetch.
   */
  orderBy?: Prisma.ProfessorOrderByWithRelationInput | Prisma.ProfessorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Professors.
   */
  cursor?: Prisma.ProfessorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Professors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Professors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Professors.
   */
  distinct?: Prisma.ProfessorScalarFieldEnum | Prisma.ProfessorScalarFieldEnum[]
}

/**
 * Professor findFirstOrThrow
 */
export type ProfessorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Professor
   */
  select?: Prisma.ProfessorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Professor
   */
  omit?: Prisma.ProfessorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfessorInclude<ExtArgs> | null
  /**
   * Filter, which Professor to fetch.
   */
  where?: Prisma.ProfessorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Professors to fetch.
   */
  orderBy?: Prisma.ProfessorOrderByWithRelationInput | Prisma.ProfessorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Professors.
   */
  cursor?: Prisma.ProfessorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Professors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Professors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Professors.
   */
  distinct?: Prisma.ProfessorScalarFieldEnum | Prisma.ProfessorScalarFieldEnum[]
}

/**
 * Professor findMany
 */
export type ProfessorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Professor
   */
  select?: Prisma.ProfessorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Professor
   */
  omit?: Prisma.ProfessorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfessorInclude<ExtArgs> | null
  /**
   * Filter, which Professors to fetch.
   */
  where?: Prisma.ProfessorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Professors to fetch.
   */
  orderBy?: Prisma.ProfessorOrderByWithRelationInput | Prisma.ProfessorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Professors.
   */
  cursor?: Prisma.ProfessorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Professors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Professors.
   */
  skip?: number
  distinct?: Prisma.ProfessorScalarFieldEnum | Prisma.ProfessorScalarFieldEnum[]
}

/**
 * Professor create
 */
export type ProfessorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Professor
   */
  select?: Prisma.ProfessorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Professor
   */
  omit?: Prisma.ProfessorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfessorInclude<ExtArgs> | null
  /**
   * The data needed to create a Professor.
   */
  data: Prisma.XOR<Prisma.ProfessorCreateInput, Prisma.ProfessorUncheckedCreateInput>
}

/**
 * Professor createMany
 */
export type ProfessorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Professors.
   */
  data: Prisma.ProfessorCreateManyInput | Prisma.ProfessorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Professor update
 */
export type ProfessorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Professor
   */
  select?: Prisma.ProfessorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Professor
   */
  omit?: Prisma.ProfessorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfessorInclude<ExtArgs> | null
  /**
   * The data needed to update a Professor.
   */
  data: Prisma.XOR<Prisma.ProfessorUpdateInput, Prisma.ProfessorUncheckedUpdateInput>
  /**
   * Choose, which Professor to update.
   */
  where: Prisma.ProfessorWhereUniqueInput
}

/**
 * Professor updateMany
 */
export type ProfessorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Professors.
   */
  data: Prisma.XOR<Prisma.ProfessorUpdateManyMutationInput, Prisma.ProfessorUncheckedUpdateManyInput>
  /**
   * Filter which Professors to update
   */
  where?: Prisma.ProfessorWhereInput
  /**
   * Limit how many Professors to update.
   */
  limit?: number
}

/**
 * Professor upsert
 */
export type ProfessorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Professor
   */
  select?: Prisma.ProfessorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Professor
   */
  omit?: Prisma.ProfessorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfessorInclude<ExtArgs> | null
  /**
   * The filter to search for the Professor to update in case it exists.
   */
  where: Prisma.ProfessorWhereUniqueInput
  /**
   * In case the Professor found by the `where` argument doesn't exist, create a new Professor with this data.
   */
  create: Prisma.XOR<Prisma.ProfessorCreateInput, Prisma.ProfessorUncheckedCreateInput>
  /**
   * In case the Professor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProfessorUpdateInput, Prisma.ProfessorUncheckedUpdateInput>
}

/**
 * Professor delete
 */
export type ProfessorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Professor
   */
  select?: Prisma.ProfessorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Professor
   */
  omit?: Prisma.ProfessorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfessorInclude<ExtArgs> | null
  /**
   * Filter which Professor to delete.
   */
  where: Prisma.ProfessorWhereUniqueInput
}

/**
 * Professor deleteMany
 */
export type ProfessorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Professors to delete
   */
  where?: Prisma.ProfessorWhereInput
  /**
   * Limit how many Professors to delete.
   */
  limit?: number
}

/**
 * Professor.notas
 */
export type Professor$notasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Nota
   */
  select?: Prisma.NotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Nota
   */
  omit?: Prisma.NotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotaInclude<ExtArgs> | null
  where?: Prisma.NotaWhereInput
  orderBy?: Prisma.NotaOrderByWithRelationInput | Prisma.NotaOrderByWithRelationInput[]
  cursor?: Prisma.NotaWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NotaScalarFieldEnum | Prisma.NotaScalarFieldEnum[]
}

/**
 * Professor.disciplinas
 */
export type Professor$disciplinasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Disciplina
   */
  select?: Prisma.DisciplinaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Disciplina
   */
  omit?: Prisma.DisciplinaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisciplinaInclude<ExtArgs> | null
  where?: Prisma.DisciplinaWhereInput
  orderBy?: Prisma.DisciplinaOrderByWithRelationInput | Prisma.DisciplinaOrderByWithRelationInput[]
  cursor?: Prisma.DisciplinaWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DisciplinaScalarFieldEnum | Prisma.DisciplinaScalarFieldEnum[]
}

/**
 * Professor without action
 */
export type ProfessorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Professor
   */
  select?: Prisma.ProfessorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Professor
   */
  omit?: Prisma.ProfessorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfessorInclude<ExtArgs> | null
}
