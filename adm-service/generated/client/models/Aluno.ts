
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Aluno` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Aluno
 * 
 */
export type AlunoModel = runtime.Types.Result.DefaultSelection<Prisma.$AlunoPayload>

export type AggregateAluno = {
  _count: AlunoCountAggregateOutputType | null
  _avg: AlunoAvgAggregateOutputType | null
  _sum: AlunoSumAggregateOutputType | null
  _min: AlunoMinAggregateOutputType | null
  _max: AlunoMaxAggregateOutputType | null
}

export type AlunoAvgAggregateOutputType = {
  id: number | null
}

export type AlunoSumAggregateOutputType = {
  id: number | null
}

export type AlunoMinAggregateOutputType = {
  id: number | null
  nome: string | null
  email: string | null
}

export type AlunoMaxAggregateOutputType = {
  id: number | null
  nome: string | null
  email: string | null
}

export type AlunoCountAggregateOutputType = {
  id: number
  nome: number
  email: number
  _all: number
}


export type AlunoAvgAggregateInputType = {
  id?: true
}

export type AlunoSumAggregateInputType = {
  id?: true
}

export type AlunoMinAggregateInputType = {
  id?: true
  nome?: true
  email?: true
}

export type AlunoMaxAggregateInputType = {
  id?: true
  nome?: true
  email?: true
}

export type AlunoCountAggregateInputType = {
  id?: true
  nome?: true
  email?: true
  _all?: true
}

export type AlunoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Aluno to aggregate.
   */
  where?: Prisma.AlunoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Alunos to fetch.
   */
  orderBy?: Prisma.AlunoOrderByWithRelationInput | Prisma.AlunoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AlunoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Alunos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Alunos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Alunos
  **/
  _count?: true | AlunoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AlunoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AlunoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AlunoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AlunoMaxAggregateInputType
}

export type GetAlunoAggregateType<T extends AlunoAggregateArgs> = {
      [P in keyof T & keyof AggregateAluno]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAluno[P]>
    : Prisma.GetScalarType<T[P], AggregateAluno[P]>
}




export type AlunoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AlunoWhereInput
  orderBy?: Prisma.AlunoOrderByWithAggregationInput | Prisma.AlunoOrderByWithAggregationInput[]
  by: Prisma.AlunoScalarFieldEnum[] | Prisma.AlunoScalarFieldEnum
  having?: Prisma.AlunoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AlunoCountAggregateInputType | true
  _avg?: AlunoAvgAggregateInputType
  _sum?: AlunoSumAggregateInputType
  _min?: AlunoMinAggregateInputType
  _max?: AlunoMaxAggregateInputType
}

export type AlunoGroupByOutputType = {
  id: number
  nome: string
  email: string
  _count: AlunoCountAggregateOutputType | null
  _avg: AlunoAvgAggregateOutputType | null
  _sum: AlunoSumAggregateOutputType | null
  _min: AlunoMinAggregateOutputType | null
  _max: AlunoMaxAggregateOutputType | null
}

type GetAlunoGroupByPayload<T extends AlunoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AlunoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AlunoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AlunoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AlunoGroupByOutputType[P]>
      }
    >
  > 



export type AlunoWhereInput = {
  AND?: Prisma.AlunoWhereInput | Prisma.AlunoWhereInput[]
  OR?: Prisma.AlunoWhereInput[]
  NOT?: Prisma.AlunoWhereInput | Prisma.AlunoWhereInput[]
  id?: Prisma.IntFilter<"Aluno"> | number
  nome?: Prisma.StringFilter<"Aluno"> | string
  email?: Prisma.StringFilter<"Aluno"> | string
  notas?: Prisma.NotaListRelationFilter
}

export type AlunoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  email?: Prisma.SortOrder
  notas?: Prisma.NotaOrderByRelationAggregateInput
  _relevance?: Prisma.AlunoOrderByRelevanceInput
}

export type AlunoWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.AlunoWhereInput | Prisma.AlunoWhereInput[]
  OR?: Prisma.AlunoWhereInput[]
  NOT?: Prisma.AlunoWhereInput | Prisma.AlunoWhereInput[]
  nome?: Prisma.StringFilter<"Aluno"> | string
  email?: Prisma.StringFilter<"Aluno"> | string
  notas?: Prisma.NotaListRelationFilter
}, "id">

export type AlunoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  email?: Prisma.SortOrder
  _count?: Prisma.AlunoCountOrderByAggregateInput
  _avg?: Prisma.AlunoAvgOrderByAggregateInput
  _max?: Prisma.AlunoMaxOrderByAggregateInput
  _min?: Prisma.AlunoMinOrderByAggregateInput
  _sum?: Prisma.AlunoSumOrderByAggregateInput
}

export type AlunoScalarWhereWithAggregatesInput = {
  AND?: Prisma.AlunoScalarWhereWithAggregatesInput | Prisma.AlunoScalarWhereWithAggregatesInput[]
  OR?: Prisma.AlunoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AlunoScalarWhereWithAggregatesInput | Prisma.AlunoScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Aluno"> | number
  nome?: Prisma.StringWithAggregatesFilter<"Aluno"> | string
  email?: Prisma.StringWithAggregatesFilter<"Aluno"> | string
}

export type AlunoCreateInput = {
  nome: string
  email: string
  notas?: Prisma.NotaCreateNestedManyWithoutAlunoInput
}

export type AlunoUncheckedCreateInput = {
  id?: number
  nome: string
  email: string
  notas?: Prisma.NotaUncheckedCreateNestedManyWithoutAlunoInput
}

export type AlunoUpdateInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  notas?: Prisma.NotaUpdateManyWithoutAlunoNestedInput
}

export type AlunoUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  notas?: Prisma.NotaUncheckedUpdateManyWithoutAlunoNestedInput
}

export type AlunoCreateManyInput = {
  id?: number
  nome: string
  email: string
}

export type AlunoUpdateManyMutationInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AlunoUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AlunoOrderByRelevanceInput = {
  fields: Prisma.AlunoOrderByRelevanceFieldEnum | Prisma.AlunoOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type AlunoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type AlunoAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type AlunoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type AlunoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  email?: Prisma.SortOrder
}

export type AlunoSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type AlunoScalarRelationFilter = {
  is?: Prisma.AlunoWhereInput
  isNot?: Prisma.AlunoWhereInput
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type AlunoCreateNestedOneWithoutNotasInput = {
  create?: Prisma.XOR<Prisma.AlunoCreateWithoutNotasInput, Prisma.AlunoUncheckedCreateWithoutNotasInput>
  connectOrCreate?: Prisma.AlunoCreateOrConnectWithoutNotasInput
  connect?: Prisma.AlunoWhereUniqueInput
}

export type AlunoUpdateOneRequiredWithoutNotasNestedInput = {
  create?: Prisma.XOR<Prisma.AlunoCreateWithoutNotasInput, Prisma.AlunoUncheckedCreateWithoutNotasInput>
  connectOrCreate?: Prisma.AlunoCreateOrConnectWithoutNotasInput
  upsert?: Prisma.AlunoUpsertWithoutNotasInput
  connect?: Prisma.AlunoWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AlunoUpdateToOneWithWhereWithoutNotasInput, Prisma.AlunoUpdateWithoutNotasInput>, Prisma.AlunoUncheckedUpdateWithoutNotasInput>
}

export type AlunoCreateWithoutNotasInput = {
  nome: string
  email: string
}

export type AlunoUncheckedCreateWithoutNotasInput = {
  id?: number
  nome: string
  email: string
}

export type AlunoCreateOrConnectWithoutNotasInput = {
  where: Prisma.AlunoWhereUniqueInput
  create: Prisma.XOR<Prisma.AlunoCreateWithoutNotasInput, Prisma.AlunoUncheckedCreateWithoutNotasInput>
}

export type AlunoUpsertWithoutNotasInput = {
  update: Prisma.XOR<Prisma.AlunoUpdateWithoutNotasInput, Prisma.AlunoUncheckedUpdateWithoutNotasInput>
  create: Prisma.XOR<Prisma.AlunoCreateWithoutNotasInput, Prisma.AlunoUncheckedCreateWithoutNotasInput>
  where?: Prisma.AlunoWhereInput
}

export type AlunoUpdateToOneWithWhereWithoutNotasInput = {
  where?: Prisma.AlunoWhereInput
  data: Prisma.XOR<Prisma.AlunoUpdateWithoutNotasInput, Prisma.AlunoUncheckedUpdateWithoutNotasInput>
}

export type AlunoUpdateWithoutNotasInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AlunoUncheckedUpdateWithoutNotasInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type AlunoCountOutputType
 */

export type AlunoCountOutputType = {
  notas: number
}

export type AlunoCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  notas?: boolean | AlunoCountOutputTypeCountNotasArgs
}

/**
 * AlunoCountOutputType without action
 */
export type AlunoCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AlunoCountOutputType
   */
  select?: Prisma.AlunoCountOutputTypeSelect<ExtArgs> | null
}

/**
 * AlunoCountOutputType without action
 */
export type AlunoCountOutputTypeCountNotasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotaWhereInput
}


export type AlunoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nome?: boolean
  email?: boolean
  notas?: boolean | Prisma.Aluno$notasArgs<ExtArgs>
  _count?: boolean | Prisma.AlunoCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["aluno"]>



export type AlunoSelectScalar = {
  id?: boolean
  nome?: boolean
  email?: boolean
}

export type AlunoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nome" | "email", ExtArgs["result"]["aluno"]>
export type AlunoInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  notas?: boolean | Prisma.Aluno$notasArgs<ExtArgs>
  _count?: boolean | Prisma.AlunoCountOutputTypeDefaultArgs<ExtArgs>
}

export type $AlunoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Aluno"
  objects: {
    notas: Prisma.$NotaPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nome: string
    email: string
  }, ExtArgs["result"]["aluno"]>
  composites: {}
}

export type AlunoGetPayload<S extends boolean | null | undefined | AlunoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AlunoPayload, S>

export type AlunoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AlunoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AlunoCountAggregateInputType | true
  }

export interface AlunoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Aluno'], meta: { name: 'Aluno' } }
  /**
   * Find zero or one Aluno that matches the filter.
   * @param {AlunoFindUniqueArgs} args - Arguments to find a Aluno
   * @example
   * // Get one Aluno
   * const aluno = await prisma.aluno.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AlunoFindUniqueArgs>(args: Prisma.SelectSubset<T, AlunoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AlunoClient<runtime.Types.Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Aluno that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AlunoFindUniqueOrThrowArgs} args - Arguments to find a Aluno
   * @example
   * // Get one Aluno
   * const aluno = await prisma.aluno.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AlunoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AlunoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AlunoClient<runtime.Types.Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Aluno that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AlunoFindFirstArgs} args - Arguments to find a Aluno
   * @example
   * // Get one Aluno
   * const aluno = await prisma.aluno.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AlunoFindFirstArgs>(args?: Prisma.SelectSubset<T, AlunoFindFirstArgs<ExtArgs>>): Prisma.Prisma__AlunoClient<runtime.Types.Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Aluno that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AlunoFindFirstOrThrowArgs} args - Arguments to find a Aluno
   * @example
   * // Get one Aluno
   * const aluno = await prisma.aluno.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AlunoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AlunoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AlunoClient<runtime.Types.Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Alunos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AlunoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Alunos
   * const alunos = await prisma.aluno.findMany()
   * 
   * // Get first 10 Alunos
   * const alunos = await prisma.aluno.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const alunoWithIdOnly = await prisma.aluno.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AlunoFindManyArgs>(args?: Prisma.SelectSubset<T, AlunoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Aluno.
   * @param {AlunoCreateArgs} args - Arguments to create a Aluno.
   * @example
   * // Create one Aluno
   * const Aluno = await prisma.aluno.create({
   *   data: {
   *     // ... data to create a Aluno
   *   }
   * })
   * 
   */
  create<T extends AlunoCreateArgs>(args: Prisma.SelectSubset<T, AlunoCreateArgs<ExtArgs>>): Prisma.Prisma__AlunoClient<runtime.Types.Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Alunos.
   * @param {AlunoCreateManyArgs} args - Arguments to create many Alunos.
   * @example
   * // Create many Alunos
   * const aluno = await prisma.aluno.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AlunoCreateManyArgs>(args?: Prisma.SelectSubset<T, AlunoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Aluno.
   * @param {AlunoDeleteArgs} args - Arguments to delete one Aluno.
   * @example
   * // Delete one Aluno
   * const Aluno = await prisma.aluno.delete({
   *   where: {
   *     // ... filter to delete one Aluno
   *   }
   * })
   * 
   */
  delete<T extends AlunoDeleteArgs>(args: Prisma.SelectSubset<T, AlunoDeleteArgs<ExtArgs>>): Prisma.Prisma__AlunoClient<runtime.Types.Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Aluno.
   * @param {AlunoUpdateArgs} args - Arguments to update one Aluno.
   * @example
   * // Update one Aluno
   * const aluno = await prisma.aluno.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AlunoUpdateArgs>(args: Prisma.SelectSubset<T, AlunoUpdateArgs<ExtArgs>>): Prisma.Prisma__AlunoClient<runtime.Types.Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Alunos.
   * @param {AlunoDeleteManyArgs} args - Arguments to filter Alunos to delete.
   * @example
   * // Delete a few Alunos
   * const { count } = await prisma.aluno.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AlunoDeleteManyArgs>(args?: Prisma.SelectSubset<T, AlunoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Alunos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AlunoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Alunos
   * const aluno = await prisma.aluno.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AlunoUpdateManyArgs>(args: Prisma.SelectSubset<T, AlunoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Aluno.
   * @param {AlunoUpsertArgs} args - Arguments to update or create a Aluno.
   * @example
   * // Update or create a Aluno
   * const aluno = await prisma.aluno.upsert({
   *   create: {
   *     // ... data to create a Aluno
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Aluno we want to update
   *   }
   * })
   */
  upsert<T extends AlunoUpsertArgs>(args: Prisma.SelectSubset<T, AlunoUpsertArgs<ExtArgs>>): Prisma.Prisma__AlunoClient<runtime.Types.Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Alunos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AlunoCountArgs} args - Arguments to filter Alunos to count.
   * @example
   * // Count the number of Alunos
   * const count = await prisma.aluno.count({
   *   where: {
   *     // ... the filter for the Alunos we want to count
   *   }
   * })
  **/
  count<T extends AlunoCountArgs>(
    args?: Prisma.Subset<T, AlunoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AlunoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Aluno.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AlunoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AlunoAggregateArgs>(args: Prisma.Subset<T, AlunoAggregateArgs>): Prisma.PrismaPromise<GetAlunoAggregateType<T>>

  /**
   * Group by Aluno.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AlunoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AlunoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AlunoGroupByArgs['orderBy'] }
      : { orderBy?: AlunoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AlunoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlunoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Aluno model
 */
readonly fields: AlunoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Aluno.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AlunoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  notas<T extends Prisma.Aluno$notasArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Aluno$notasArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Aluno model
 */
export interface AlunoFieldRefs {
  readonly id: Prisma.FieldRef<"Aluno", 'Int'>
  readonly nome: Prisma.FieldRef<"Aluno", 'String'>
  readonly email: Prisma.FieldRef<"Aluno", 'String'>
}
    

// Custom InputTypes
/**
 * Aluno findUnique
 */
export type AlunoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Aluno
   */
  select?: Prisma.AlunoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Aluno
   */
  omit?: Prisma.AlunoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AlunoInclude<ExtArgs> | null
  /**
   * Filter, which Aluno to fetch.
   */
  where: Prisma.AlunoWhereUniqueInput
}

/**
 * Aluno findUniqueOrThrow
 */
export type AlunoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Aluno
   */
  select?: Prisma.AlunoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Aluno
   */
  omit?: Prisma.AlunoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AlunoInclude<ExtArgs> | null
  /**
   * Filter, which Aluno to fetch.
   */
  where: Prisma.AlunoWhereUniqueInput
}

/**
 * Aluno findFirst
 */
export type AlunoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Aluno
   */
  select?: Prisma.AlunoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Aluno
   */
  omit?: Prisma.AlunoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AlunoInclude<ExtArgs> | null
  /**
   * Filter, which Aluno to fetch.
   */
  where?: Prisma.AlunoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Alunos to fetch.
   */
  orderBy?: Prisma.AlunoOrderByWithRelationInput | Prisma.AlunoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Alunos.
   */
  cursor?: Prisma.AlunoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Alunos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Alunos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Alunos.
   */
  distinct?: Prisma.AlunoScalarFieldEnum | Prisma.AlunoScalarFieldEnum[]
}

/**
 * Aluno findFirstOrThrow
 */
export type AlunoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Aluno
   */
  select?: Prisma.AlunoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Aluno
   */
  omit?: Prisma.AlunoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AlunoInclude<ExtArgs> | null
  /**
   * Filter, which Aluno to fetch.
   */
  where?: Prisma.AlunoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Alunos to fetch.
   */
  orderBy?: Prisma.AlunoOrderByWithRelationInput | Prisma.AlunoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Alunos.
   */
  cursor?: Prisma.AlunoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Alunos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Alunos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Alunos.
   */
  distinct?: Prisma.AlunoScalarFieldEnum | Prisma.AlunoScalarFieldEnum[]
}

/**
 * Aluno findMany
 */
export type AlunoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Aluno
   */
  select?: Prisma.AlunoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Aluno
   */
  omit?: Prisma.AlunoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AlunoInclude<ExtArgs> | null
  /**
   * Filter, which Alunos to fetch.
   */
  where?: Prisma.AlunoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Alunos to fetch.
   */
  orderBy?: Prisma.AlunoOrderByWithRelationInput | Prisma.AlunoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Alunos.
   */
  cursor?: Prisma.AlunoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Alunos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Alunos.
   */
  skip?: number
  distinct?: Prisma.AlunoScalarFieldEnum | Prisma.AlunoScalarFieldEnum[]
}

/**
 * Aluno create
 */
export type AlunoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Aluno
   */
  select?: Prisma.AlunoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Aluno
   */
  omit?: Prisma.AlunoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AlunoInclude<ExtArgs> | null
  /**
   * The data needed to create a Aluno.
   */
  data: Prisma.XOR<Prisma.AlunoCreateInput, Prisma.AlunoUncheckedCreateInput>
}

/**
 * Aluno createMany
 */
export type AlunoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Alunos.
   */
  data: Prisma.AlunoCreateManyInput | Prisma.AlunoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Aluno update
 */
export type AlunoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Aluno
   */
  select?: Prisma.AlunoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Aluno
   */
  omit?: Prisma.AlunoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AlunoInclude<ExtArgs> | null
  /**
   * The data needed to update a Aluno.
   */
  data: Prisma.XOR<Prisma.AlunoUpdateInput, Prisma.AlunoUncheckedUpdateInput>
  /**
   * Choose, which Aluno to update.
   */
  where: Prisma.AlunoWhereUniqueInput
}

/**
 * Aluno updateMany
 */
export type AlunoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Alunos.
   */
  data: Prisma.XOR<Prisma.AlunoUpdateManyMutationInput, Prisma.AlunoUncheckedUpdateManyInput>
  /**
   * Filter which Alunos to update
   */
  where?: Prisma.AlunoWhereInput
  /**
   * Limit how many Alunos to update.
   */
  limit?: number
}

/**
 * Aluno upsert
 */
export type AlunoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Aluno
   */
  select?: Prisma.AlunoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Aluno
   */
  omit?: Prisma.AlunoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AlunoInclude<ExtArgs> | null
  /**
   * The filter to search for the Aluno to update in case it exists.
   */
  where: Prisma.AlunoWhereUniqueInput
  /**
   * In case the Aluno found by the `where` argument doesn't exist, create a new Aluno with this data.
   */
  create: Prisma.XOR<Prisma.AlunoCreateInput, Prisma.AlunoUncheckedCreateInput>
  /**
   * In case the Aluno was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AlunoUpdateInput, Prisma.AlunoUncheckedUpdateInput>
}

/**
 * Aluno delete
 */
export type AlunoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Aluno
   */
  select?: Prisma.AlunoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Aluno
   */
  omit?: Prisma.AlunoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AlunoInclude<ExtArgs> | null
  /**
   * Filter which Aluno to delete.
   */
  where: Prisma.AlunoWhereUniqueInput
}

/**
 * Aluno deleteMany
 */
export type AlunoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Alunos to delete
   */
  where?: Prisma.AlunoWhereInput
  /**
   * Limit how many Alunos to delete.
   */
  limit?: number
}

/**
 * Aluno.notas
 */
export type Aluno$notasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Nota
   */
  select?: Prisma.NotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Nota
   */
  omit?: Prisma.NotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotaInclude<ExtArgs> | null
  where?: Prisma.NotaWhereInput
  orderBy?: Prisma.NotaOrderByWithRelationInput | Prisma.NotaOrderByWithRelationInput[]
  cursor?: Prisma.NotaWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NotaScalarFieldEnum | Prisma.NotaScalarFieldEnum[]
}

/**
 * Aluno without action
 */
export type AlunoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Aluno
   */
  select?: Prisma.AlunoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Aluno
   */
  omit?: Prisma.AlunoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AlunoInclude<ExtArgs> | null
}
