
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Disciplina` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Disciplina
 * 
 */
export type DisciplinaModel = runtime.Types.Result.DefaultSelection<Prisma.$DisciplinaPayload>

export type AggregateDisciplina = {
  _count: DisciplinaCountAggregateOutputType | null
  _avg: DisciplinaAvgAggregateOutputType | null
  _sum: DisciplinaSumAggregateOutputType | null
  _min: DisciplinaMinAggregateOutputType | null
  _max: DisciplinaMaxAggregateOutputType | null
}

export type DisciplinaAvgAggregateOutputType = {
  id: number | null
  professorId: number | null
}

export type DisciplinaSumAggregateOutputType = {
  id: number | null
  professorId: number | null
}

export type DisciplinaMinAggregateOutputType = {
  id: number | null
  nome: string | null
  professorId: number | null
}

export type DisciplinaMaxAggregateOutputType = {
  id: number | null
  nome: string | null
  professorId: number | null
}

export type DisciplinaCountAggregateOutputType = {
  id: number
  nome: number
  professorId: number
  _all: number
}


export type DisciplinaAvgAggregateInputType = {
  id?: true
  professorId?: true
}

export type DisciplinaSumAggregateInputType = {
  id?: true
  professorId?: true
}

export type DisciplinaMinAggregateInputType = {
  id?: true
  nome?: true
  professorId?: true
}

export type DisciplinaMaxAggregateInputType = {
  id?: true
  nome?: true
  professorId?: true
}

export type DisciplinaCountAggregateInputType = {
  id?: true
  nome?: true
  professorId?: true
  _all?: true
}

export type DisciplinaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Disciplina to aggregate.
   */
  where?: Prisma.DisciplinaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Disciplinas to fetch.
   */
  orderBy?: Prisma.DisciplinaOrderByWithRelationInput | Prisma.DisciplinaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DisciplinaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Disciplinas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Disciplinas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Disciplinas
  **/
  _count?: true | DisciplinaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DisciplinaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DisciplinaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DisciplinaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DisciplinaMaxAggregateInputType
}

export type GetDisciplinaAggregateType<T extends DisciplinaAggregateArgs> = {
      [P in keyof T & keyof AggregateDisciplina]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDisciplina[P]>
    : Prisma.GetScalarType<T[P], AggregateDisciplina[P]>
}




export type DisciplinaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DisciplinaWhereInput
  orderBy?: Prisma.DisciplinaOrderByWithAggregationInput | Prisma.DisciplinaOrderByWithAggregationInput[]
  by: Prisma.DisciplinaScalarFieldEnum[] | Prisma.DisciplinaScalarFieldEnum
  having?: Prisma.DisciplinaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DisciplinaCountAggregateInputType | true
  _avg?: DisciplinaAvgAggregateInputType
  _sum?: DisciplinaSumAggregateInputType
  _min?: DisciplinaMinAggregateInputType
  _max?: DisciplinaMaxAggregateInputType
}

export type DisciplinaGroupByOutputType = {
  id: number
  nome: string
  professorId: number | null
  _count: DisciplinaCountAggregateOutputType | null
  _avg: DisciplinaAvgAggregateOutputType | null
  _sum: DisciplinaSumAggregateOutputType | null
  _min: DisciplinaMinAggregateOutputType | null
  _max: DisciplinaMaxAggregateOutputType | null
}

type GetDisciplinaGroupByPayload<T extends DisciplinaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DisciplinaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DisciplinaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DisciplinaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DisciplinaGroupByOutputType[P]>
      }
    >
  > 



export type DisciplinaWhereInput = {
  AND?: Prisma.DisciplinaWhereInput | Prisma.DisciplinaWhereInput[]
  OR?: Prisma.DisciplinaWhereInput[]
  NOT?: Prisma.DisciplinaWhereInput | Prisma.DisciplinaWhereInput[]
  id?: Prisma.IntFilter<"Disciplina"> | number
  nome?: Prisma.StringFilter<"Disciplina"> | string
  professorId?: Prisma.IntNullableFilter<"Disciplina"> | number | null
  professor?: Prisma.XOR<Prisma.ProfessorNullableScalarRelationFilter, Prisma.ProfessorWhereInput> | null
  notas?: Prisma.NotaListRelationFilter
}

export type DisciplinaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  professorId?: Prisma.SortOrderInput | Prisma.SortOrder
  professor?: Prisma.ProfessorOrderByWithRelationInput
  notas?: Prisma.NotaOrderByRelationAggregateInput
  _relevance?: Prisma.DisciplinaOrderByRelevanceInput
}

export type DisciplinaWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.DisciplinaWhereInput | Prisma.DisciplinaWhereInput[]
  OR?: Prisma.DisciplinaWhereInput[]
  NOT?: Prisma.DisciplinaWhereInput | Prisma.DisciplinaWhereInput[]
  nome?: Prisma.StringFilter<"Disciplina"> | string
  professorId?: Prisma.IntNullableFilter<"Disciplina"> | number | null
  professor?: Prisma.XOR<Prisma.ProfessorNullableScalarRelationFilter, Prisma.ProfessorWhereInput> | null
  notas?: Prisma.NotaListRelationFilter
}, "id">

export type DisciplinaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  professorId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.DisciplinaCountOrderByAggregateInput
  _avg?: Prisma.DisciplinaAvgOrderByAggregateInput
  _max?: Prisma.DisciplinaMaxOrderByAggregateInput
  _min?: Prisma.DisciplinaMinOrderByAggregateInput
  _sum?: Prisma.DisciplinaSumOrderByAggregateInput
}

export type DisciplinaScalarWhereWithAggregatesInput = {
  AND?: Prisma.DisciplinaScalarWhereWithAggregatesInput | Prisma.DisciplinaScalarWhereWithAggregatesInput[]
  OR?: Prisma.DisciplinaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DisciplinaScalarWhereWithAggregatesInput | Prisma.DisciplinaScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Disciplina"> | number
  nome?: Prisma.StringWithAggregatesFilter<"Disciplina"> | string
  professorId?: Prisma.IntNullableWithAggregatesFilter<"Disciplina"> | number | null
}

export type DisciplinaCreateInput = {
  nome: string
  professor?: Prisma.ProfessorCreateNestedOneWithoutDisciplinasInput
  notas?: Prisma.NotaCreateNestedManyWithoutDisciplinaInput
}

export type DisciplinaUncheckedCreateInput = {
  id?: number
  nome: string
  professorId?: number | null
  notas?: Prisma.NotaUncheckedCreateNestedManyWithoutDisciplinaInput
}

export type DisciplinaUpdateInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  professor?: Prisma.ProfessorUpdateOneWithoutDisciplinasNestedInput
  notas?: Prisma.NotaUpdateManyWithoutDisciplinaNestedInput
}

export type DisciplinaUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  professorId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  notas?: Prisma.NotaUncheckedUpdateManyWithoutDisciplinaNestedInput
}

export type DisciplinaCreateManyInput = {
  id?: number
  nome: string
  professorId?: number | null
}

export type DisciplinaUpdateManyMutationInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DisciplinaUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  professorId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type DisciplinaListRelationFilter = {
  every?: Prisma.DisciplinaWhereInput
  some?: Prisma.DisciplinaWhereInput
  none?: Prisma.DisciplinaWhereInput
}

export type DisciplinaOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DisciplinaOrderByRelevanceInput = {
  fields: Prisma.DisciplinaOrderByRelevanceFieldEnum | Prisma.DisciplinaOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type DisciplinaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  professorId?: Prisma.SortOrder
}

export type DisciplinaAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  professorId?: Prisma.SortOrder
}

export type DisciplinaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  professorId?: Prisma.SortOrder
}

export type DisciplinaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  nome?: Prisma.SortOrder
  professorId?: Prisma.SortOrder
}

export type DisciplinaSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  professorId?: Prisma.SortOrder
}

export type DisciplinaScalarRelationFilter = {
  is?: Prisma.DisciplinaWhereInput
  isNot?: Prisma.DisciplinaWhereInput
}

export type DisciplinaCreateNestedManyWithoutProfessorInput = {
  create?: Prisma.XOR<Prisma.DisciplinaCreateWithoutProfessorInput, Prisma.DisciplinaUncheckedCreateWithoutProfessorInput> | Prisma.DisciplinaCreateWithoutProfessorInput[] | Prisma.DisciplinaUncheckedCreateWithoutProfessorInput[]
  connectOrCreate?: Prisma.DisciplinaCreateOrConnectWithoutProfessorInput | Prisma.DisciplinaCreateOrConnectWithoutProfessorInput[]
  createMany?: Prisma.DisciplinaCreateManyProfessorInputEnvelope
  connect?: Prisma.DisciplinaWhereUniqueInput | Prisma.DisciplinaWhereUniqueInput[]
}

export type DisciplinaUncheckedCreateNestedManyWithoutProfessorInput = {
  create?: Prisma.XOR<Prisma.DisciplinaCreateWithoutProfessorInput, Prisma.DisciplinaUncheckedCreateWithoutProfessorInput> | Prisma.DisciplinaCreateWithoutProfessorInput[] | Prisma.DisciplinaUncheckedCreateWithoutProfessorInput[]
  connectOrCreate?: Prisma.DisciplinaCreateOrConnectWithoutProfessorInput | Prisma.DisciplinaCreateOrConnectWithoutProfessorInput[]
  createMany?: Prisma.DisciplinaCreateManyProfessorInputEnvelope
  connect?: Prisma.DisciplinaWhereUniqueInput | Prisma.DisciplinaWhereUniqueInput[]
}

export type DisciplinaUpdateManyWithoutProfessorNestedInput = {
  create?: Prisma.XOR<Prisma.DisciplinaCreateWithoutProfessorInput, Prisma.DisciplinaUncheckedCreateWithoutProfessorInput> | Prisma.DisciplinaCreateWithoutProfessorInput[] | Prisma.DisciplinaUncheckedCreateWithoutProfessorInput[]
  connectOrCreate?: Prisma.DisciplinaCreateOrConnectWithoutProfessorInput | Prisma.DisciplinaCreateOrConnectWithoutProfessorInput[]
  upsert?: Prisma.DisciplinaUpsertWithWhereUniqueWithoutProfessorInput | Prisma.DisciplinaUpsertWithWhereUniqueWithoutProfessorInput[]
  createMany?: Prisma.DisciplinaCreateManyProfessorInputEnvelope
  set?: Prisma.DisciplinaWhereUniqueInput | Prisma.DisciplinaWhereUniqueInput[]
  disconnect?: Prisma.DisciplinaWhereUniqueInput | Prisma.DisciplinaWhereUniqueInput[]
  delete?: Prisma.DisciplinaWhereUniqueInput | Prisma.DisciplinaWhereUniqueInput[]
  connect?: Prisma.DisciplinaWhereUniqueInput | Prisma.DisciplinaWhereUniqueInput[]
  update?: Prisma.DisciplinaUpdateWithWhereUniqueWithoutProfessorInput | Prisma.DisciplinaUpdateWithWhereUniqueWithoutProfessorInput[]
  updateMany?: Prisma.DisciplinaUpdateManyWithWhereWithoutProfessorInput | Prisma.DisciplinaUpdateManyWithWhereWithoutProfessorInput[]
  deleteMany?: Prisma.DisciplinaScalarWhereInput | Prisma.DisciplinaScalarWhereInput[]
}

export type DisciplinaUncheckedUpdateManyWithoutProfessorNestedInput = {
  create?: Prisma.XOR<Prisma.DisciplinaCreateWithoutProfessorInput, Prisma.DisciplinaUncheckedCreateWithoutProfessorInput> | Prisma.DisciplinaCreateWithoutProfessorInput[] | Prisma.DisciplinaUncheckedCreateWithoutProfessorInput[]
  connectOrCreate?: Prisma.DisciplinaCreateOrConnectWithoutProfessorInput | Prisma.DisciplinaCreateOrConnectWithoutProfessorInput[]
  upsert?: Prisma.DisciplinaUpsertWithWhereUniqueWithoutProfessorInput | Prisma.DisciplinaUpsertWithWhereUniqueWithoutProfessorInput[]
  createMany?: Prisma.DisciplinaCreateManyProfessorInputEnvelope
  set?: Prisma.DisciplinaWhereUniqueInput | Prisma.DisciplinaWhereUniqueInput[]
  disconnect?: Prisma.DisciplinaWhereUniqueInput | Prisma.DisciplinaWhereUniqueInput[]
  delete?: Prisma.DisciplinaWhereUniqueInput | Prisma.DisciplinaWhereUniqueInput[]
  connect?: Prisma.DisciplinaWhereUniqueInput | Prisma.DisciplinaWhereUniqueInput[]
  update?: Prisma.DisciplinaUpdateWithWhereUniqueWithoutProfessorInput | Prisma.DisciplinaUpdateWithWhereUniqueWithoutProfessorInput[]
  updateMany?: Prisma.DisciplinaUpdateManyWithWhereWithoutProfessorInput | Prisma.DisciplinaUpdateManyWithWhereWithoutProfessorInput[]
  deleteMany?: Prisma.DisciplinaScalarWhereInput | Prisma.DisciplinaScalarWhereInput[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DisciplinaCreateNestedOneWithoutNotasInput = {
  create?: Prisma.XOR<Prisma.DisciplinaCreateWithoutNotasInput, Prisma.DisciplinaUncheckedCreateWithoutNotasInput>
  connectOrCreate?: Prisma.DisciplinaCreateOrConnectWithoutNotasInput
  connect?: Prisma.DisciplinaWhereUniqueInput
}

export type DisciplinaUpdateOneRequiredWithoutNotasNestedInput = {
  create?: Prisma.XOR<Prisma.DisciplinaCreateWithoutNotasInput, Prisma.DisciplinaUncheckedCreateWithoutNotasInput>
  connectOrCreate?: Prisma.DisciplinaCreateOrConnectWithoutNotasInput
  upsert?: Prisma.DisciplinaUpsertWithoutNotasInput
  connect?: Prisma.DisciplinaWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DisciplinaUpdateToOneWithWhereWithoutNotasInput, Prisma.DisciplinaUpdateWithoutNotasInput>, Prisma.DisciplinaUncheckedUpdateWithoutNotasInput>
}

export type DisciplinaCreateWithoutProfessorInput = {
  nome: string
  notas?: Prisma.NotaCreateNestedManyWithoutDisciplinaInput
}

export type DisciplinaUncheckedCreateWithoutProfessorInput = {
  id?: number
  nome: string
  notas?: Prisma.NotaUncheckedCreateNestedManyWithoutDisciplinaInput
}

export type DisciplinaCreateOrConnectWithoutProfessorInput = {
  where: Prisma.DisciplinaWhereUniqueInput
  create: Prisma.XOR<Prisma.DisciplinaCreateWithoutProfessorInput, Prisma.DisciplinaUncheckedCreateWithoutProfessorInput>
}

export type DisciplinaCreateManyProfessorInputEnvelope = {
  data: Prisma.DisciplinaCreateManyProfessorInput | Prisma.DisciplinaCreateManyProfessorInput[]
  skipDuplicates?: boolean
}

export type DisciplinaUpsertWithWhereUniqueWithoutProfessorInput = {
  where: Prisma.DisciplinaWhereUniqueInput
  update: Prisma.XOR<Prisma.DisciplinaUpdateWithoutProfessorInput, Prisma.DisciplinaUncheckedUpdateWithoutProfessorInput>
  create: Prisma.XOR<Prisma.DisciplinaCreateWithoutProfessorInput, Prisma.DisciplinaUncheckedCreateWithoutProfessorInput>
}

export type DisciplinaUpdateWithWhereUniqueWithoutProfessorInput = {
  where: Prisma.DisciplinaWhereUniqueInput
  data: Prisma.XOR<Prisma.DisciplinaUpdateWithoutProfessorInput, Prisma.DisciplinaUncheckedUpdateWithoutProfessorInput>
}

export type DisciplinaUpdateManyWithWhereWithoutProfessorInput = {
  where: Prisma.DisciplinaScalarWhereInput
  data: Prisma.XOR<Prisma.DisciplinaUpdateManyMutationInput, Prisma.DisciplinaUncheckedUpdateManyWithoutProfessorInput>
}

export type DisciplinaScalarWhereInput = {
  AND?: Prisma.DisciplinaScalarWhereInput | Prisma.DisciplinaScalarWhereInput[]
  OR?: Prisma.DisciplinaScalarWhereInput[]
  NOT?: Prisma.DisciplinaScalarWhereInput | Prisma.DisciplinaScalarWhereInput[]
  id?: Prisma.IntFilter<"Disciplina"> | number
  nome?: Prisma.StringFilter<"Disciplina"> | string
  professorId?: Prisma.IntNullableFilter<"Disciplina"> | number | null
}

export type DisciplinaCreateWithoutNotasInput = {
  nome: string
  professor?: Prisma.ProfessorCreateNestedOneWithoutDisciplinasInput
}

export type DisciplinaUncheckedCreateWithoutNotasInput = {
  id?: number
  nome: string
  professorId?: number | null
}

export type DisciplinaCreateOrConnectWithoutNotasInput = {
  where: Prisma.DisciplinaWhereUniqueInput
  create: Prisma.XOR<Prisma.DisciplinaCreateWithoutNotasInput, Prisma.DisciplinaUncheckedCreateWithoutNotasInput>
}

export type DisciplinaUpsertWithoutNotasInput = {
  update: Prisma.XOR<Prisma.DisciplinaUpdateWithoutNotasInput, Prisma.DisciplinaUncheckedUpdateWithoutNotasInput>
  create: Prisma.XOR<Prisma.DisciplinaCreateWithoutNotasInput, Prisma.DisciplinaUncheckedCreateWithoutNotasInput>
  where?: Prisma.DisciplinaWhereInput
}

export type DisciplinaUpdateToOneWithWhereWithoutNotasInput = {
  where?: Prisma.DisciplinaWhereInput
  data: Prisma.XOR<Prisma.DisciplinaUpdateWithoutNotasInput, Prisma.DisciplinaUncheckedUpdateWithoutNotasInput>
}

export type DisciplinaUpdateWithoutNotasInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  professor?: Prisma.ProfessorUpdateOneWithoutDisciplinasNestedInput
}

export type DisciplinaUncheckedUpdateWithoutNotasInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  professorId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type DisciplinaCreateManyProfessorInput = {
  id?: number
  nome: string
}

export type DisciplinaUpdateWithoutProfessorInput = {
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  notas?: Prisma.NotaUpdateManyWithoutDisciplinaNestedInput
}

export type DisciplinaUncheckedUpdateWithoutProfessorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
  notas?: Prisma.NotaUncheckedUpdateManyWithoutDisciplinaNestedInput
}

export type DisciplinaUncheckedUpdateManyWithoutProfessorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  nome?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type DisciplinaCountOutputType
 */

export type DisciplinaCountOutputType = {
  notas: number
}

export type DisciplinaCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  notas?: boolean | DisciplinaCountOutputTypeCountNotasArgs
}

/**
 * DisciplinaCountOutputType without action
 */
export type DisciplinaCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DisciplinaCountOutputType
   */
  select?: Prisma.DisciplinaCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DisciplinaCountOutputType without action
 */
export type DisciplinaCountOutputTypeCountNotasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotaWhereInput
}


export type DisciplinaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  nome?: boolean
  professorId?: boolean
  professor?: boolean | Prisma.Disciplina$professorArgs<ExtArgs>
  notas?: boolean | Prisma.Disciplina$notasArgs<ExtArgs>
  _count?: boolean | Prisma.DisciplinaCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["disciplina"]>



export type DisciplinaSelectScalar = {
  id?: boolean
  nome?: boolean
  professorId?: boolean
}

export type DisciplinaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "nome" | "professorId", ExtArgs["result"]["disciplina"]>
export type DisciplinaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  professor?: boolean | Prisma.Disciplina$professorArgs<ExtArgs>
  notas?: boolean | Prisma.Disciplina$notasArgs<ExtArgs>
  _count?: boolean | Prisma.DisciplinaCountOutputTypeDefaultArgs<ExtArgs>
}

export type $DisciplinaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Disciplina"
  objects: {
    professor: Prisma.$ProfessorPayload<ExtArgs> | null
    notas: Prisma.$NotaPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    nome: string
    professorId: number | null
  }, ExtArgs["result"]["disciplina"]>
  composites: {}
}

export type DisciplinaGetPayload<S extends boolean | null | undefined | DisciplinaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DisciplinaPayload, S>

export type DisciplinaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DisciplinaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DisciplinaCountAggregateInputType | true
  }

export interface DisciplinaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Disciplina'], meta: { name: 'Disciplina' } }
  /**
   * Find zero or one Disciplina that matches the filter.
   * @param {DisciplinaFindUniqueArgs} args - Arguments to find a Disciplina
   * @example
   * // Get one Disciplina
   * const disciplina = await prisma.disciplina.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DisciplinaFindUniqueArgs>(args: Prisma.SelectSubset<T, DisciplinaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DisciplinaClient<runtime.Types.Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Disciplina that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DisciplinaFindUniqueOrThrowArgs} args - Arguments to find a Disciplina
   * @example
   * // Get one Disciplina
   * const disciplina = await prisma.disciplina.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DisciplinaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DisciplinaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DisciplinaClient<runtime.Types.Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Disciplina that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisciplinaFindFirstArgs} args - Arguments to find a Disciplina
   * @example
   * // Get one Disciplina
   * const disciplina = await prisma.disciplina.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DisciplinaFindFirstArgs>(args?: Prisma.SelectSubset<T, DisciplinaFindFirstArgs<ExtArgs>>): Prisma.Prisma__DisciplinaClient<runtime.Types.Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Disciplina that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisciplinaFindFirstOrThrowArgs} args - Arguments to find a Disciplina
   * @example
   * // Get one Disciplina
   * const disciplina = await prisma.disciplina.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DisciplinaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DisciplinaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DisciplinaClient<runtime.Types.Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Disciplinas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisciplinaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Disciplinas
   * const disciplinas = await prisma.disciplina.findMany()
   * 
   * // Get first 10 Disciplinas
   * const disciplinas = await prisma.disciplina.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const disciplinaWithIdOnly = await prisma.disciplina.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DisciplinaFindManyArgs>(args?: Prisma.SelectSubset<T, DisciplinaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Disciplina.
   * @param {DisciplinaCreateArgs} args - Arguments to create a Disciplina.
   * @example
   * // Create one Disciplina
   * const Disciplina = await prisma.disciplina.create({
   *   data: {
   *     // ... data to create a Disciplina
   *   }
   * })
   * 
   */
  create<T extends DisciplinaCreateArgs>(args: Prisma.SelectSubset<T, DisciplinaCreateArgs<ExtArgs>>): Prisma.Prisma__DisciplinaClient<runtime.Types.Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Disciplinas.
   * @param {DisciplinaCreateManyArgs} args - Arguments to create many Disciplinas.
   * @example
   * // Create many Disciplinas
   * const disciplina = await prisma.disciplina.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DisciplinaCreateManyArgs>(args?: Prisma.SelectSubset<T, DisciplinaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Disciplina.
   * @param {DisciplinaDeleteArgs} args - Arguments to delete one Disciplina.
   * @example
   * // Delete one Disciplina
   * const Disciplina = await prisma.disciplina.delete({
   *   where: {
   *     // ... filter to delete one Disciplina
   *   }
   * })
   * 
   */
  delete<T extends DisciplinaDeleteArgs>(args: Prisma.SelectSubset<T, DisciplinaDeleteArgs<ExtArgs>>): Prisma.Prisma__DisciplinaClient<runtime.Types.Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Disciplina.
   * @param {DisciplinaUpdateArgs} args - Arguments to update one Disciplina.
   * @example
   * // Update one Disciplina
   * const disciplina = await prisma.disciplina.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DisciplinaUpdateArgs>(args: Prisma.SelectSubset<T, DisciplinaUpdateArgs<ExtArgs>>): Prisma.Prisma__DisciplinaClient<runtime.Types.Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Disciplinas.
   * @param {DisciplinaDeleteManyArgs} args - Arguments to filter Disciplinas to delete.
   * @example
   * // Delete a few Disciplinas
   * const { count } = await prisma.disciplina.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DisciplinaDeleteManyArgs>(args?: Prisma.SelectSubset<T, DisciplinaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Disciplinas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisciplinaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Disciplinas
   * const disciplina = await prisma.disciplina.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DisciplinaUpdateManyArgs>(args: Prisma.SelectSubset<T, DisciplinaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Disciplina.
   * @param {DisciplinaUpsertArgs} args - Arguments to update or create a Disciplina.
   * @example
   * // Update or create a Disciplina
   * const disciplina = await prisma.disciplina.upsert({
   *   create: {
   *     // ... data to create a Disciplina
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Disciplina we want to update
   *   }
   * })
   */
  upsert<T extends DisciplinaUpsertArgs>(args: Prisma.SelectSubset<T, DisciplinaUpsertArgs<ExtArgs>>): Prisma.Prisma__DisciplinaClient<runtime.Types.Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Disciplinas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisciplinaCountArgs} args - Arguments to filter Disciplinas to count.
   * @example
   * // Count the number of Disciplinas
   * const count = await prisma.disciplina.count({
   *   where: {
   *     // ... the filter for the Disciplinas we want to count
   *   }
   * })
  **/
  count<T extends DisciplinaCountArgs>(
    args?: Prisma.Subset<T, DisciplinaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DisciplinaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Disciplina.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisciplinaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DisciplinaAggregateArgs>(args: Prisma.Subset<T, DisciplinaAggregateArgs>): Prisma.PrismaPromise<GetDisciplinaAggregateType<T>>

  /**
   * Group by Disciplina.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DisciplinaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DisciplinaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DisciplinaGroupByArgs['orderBy'] }
      : { orderBy?: DisciplinaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DisciplinaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisciplinaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Disciplina model
 */
readonly fields: DisciplinaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Disciplina.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DisciplinaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  professor<T extends Prisma.Disciplina$professorArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Disciplina$professorArgs<ExtArgs>>): Prisma.Prisma__ProfessorClient<runtime.Types.Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  notas<T extends Prisma.Disciplina$notasArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Disciplina$notasArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Disciplina model
 */
export interface DisciplinaFieldRefs {
  readonly id: Prisma.FieldRef<"Disciplina", 'Int'>
  readonly nome: Prisma.FieldRef<"Disciplina", 'String'>
  readonly professorId: Prisma.FieldRef<"Disciplina", 'Int'>
}
    

// Custom InputTypes
/**
 * Disciplina findUnique
 */
export type DisciplinaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Disciplina
   */
  select?: Prisma.DisciplinaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Disciplina
   */
  omit?: Prisma.DisciplinaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisciplinaInclude<ExtArgs> | null
  /**
   * Filter, which Disciplina to fetch.
   */
  where: Prisma.DisciplinaWhereUniqueInput
}

/**
 * Disciplina findUniqueOrThrow
 */
export type DisciplinaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Disciplina
   */
  select?: Prisma.DisciplinaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Disciplina
   */
  omit?: Prisma.DisciplinaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisciplinaInclude<ExtArgs> | null
  /**
   * Filter, which Disciplina to fetch.
   */
  where: Prisma.DisciplinaWhereUniqueInput
}

/**
 * Disciplina findFirst
 */
export type DisciplinaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Disciplina
   */
  select?: Prisma.DisciplinaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Disciplina
   */
  omit?: Prisma.DisciplinaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisciplinaInclude<ExtArgs> | null
  /**
   * Filter, which Disciplina to fetch.
   */
  where?: Prisma.DisciplinaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Disciplinas to fetch.
   */
  orderBy?: Prisma.DisciplinaOrderByWithRelationInput | Prisma.DisciplinaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Disciplinas.
   */
  cursor?: Prisma.DisciplinaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Disciplinas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Disciplinas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Disciplinas.
   */
  distinct?: Prisma.DisciplinaScalarFieldEnum | Prisma.DisciplinaScalarFieldEnum[]
}

/**
 * Disciplina findFirstOrThrow
 */
export type DisciplinaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Disciplina
   */
  select?: Prisma.DisciplinaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Disciplina
   */
  omit?: Prisma.DisciplinaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisciplinaInclude<ExtArgs> | null
  /**
   * Filter, which Disciplina to fetch.
   */
  where?: Prisma.DisciplinaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Disciplinas to fetch.
   */
  orderBy?: Prisma.DisciplinaOrderByWithRelationInput | Prisma.DisciplinaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Disciplinas.
   */
  cursor?: Prisma.DisciplinaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Disciplinas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Disciplinas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Disciplinas.
   */
  distinct?: Prisma.DisciplinaScalarFieldEnum | Prisma.DisciplinaScalarFieldEnum[]
}

/**
 * Disciplina findMany
 */
export type DisciplinaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Disciplina
   */
  select?: Prisma.DisciplinaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Disciplina
   */
  omit?: Prisma.DisciplinaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisciplinaInclude<ExtArgs> | null
  /**
   * Filter, which Disciplinas to fetch.
   */
  where?: Prisma.DisciplinaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Disciplinas to fetch.
   */
  orderBy?: Prisma.DisciplinaOrderByWithRelationInput | Prisma.DisciplinaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Disciplinas.
   */
  cursor?: Prisma.DisciplinaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Disciplinas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Disciplinas.
   */
  skip?: number
  distinct?: Prisma.DisciplinaScalarFieldEnum | Prisma.DisciplinaScalarFieldEnum[]
}

/**
 * Disciplina create
 */
export type DisciplinaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Disciplina
   */
  select?: Prisma.DisciplinaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Disciplina
   */
  omit?: Prisma.DisciplinaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisciplinaInclude<ExtArgs> | null
  /**
   * The data needed to create a Disciplina.
   */
  data: Prisma.XOR<Prisma.DisciplinaCreateInput, Prisma.DisciplinaUncheckedCreateInput>
}

/**
 * Disciplina createMany
 */
export type DisciplinaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Disciplinas.
   */
  data: Prisma.DisciplinaCreateManyInput | Prisma.DisciplinaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Disciplina update
 */
export type DisciplinaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Disciplina
   */
  select?: Prisma.DisciplinaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Disciplina
   */
  omit?: Prisma.DisciplinaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisciplinaInclude<ExtArgs> | null
  /**
   * The data needed to update a Disciplina.
   */
  data: Prisma.XOR<Prisma.DisciplinaUpdateInput, Prisma.DisciplinaUncheckedUpdateInput>
  /**
   * Choose, which Disciplina to update.
   */
  where: Prisma.DisciplinaWhereUniqueInput
}

/**
 * Disciplina updateMany
 */
export type DisciplinaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Disciplinas.
   */
  data: Prisma.XOR<Prisma.DisciplinaUpdateManyMutationInput, Prisma.DisciplinaUncheckedUpdateManyInput>
  /**
   * Filter which Disciplinas to update
   */
  where?: Prisma.DisciplinaWhereInput
  /**
   * Limit how many Disciplinas to update.
   */
  limit?: number
}

/**
 * Disciplina upsert
 */
export type DisciplinaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Disciplina
   */
  select?: Prisma.DisciplinaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Disciplina
   */
  omit?: Prisma.DisciplinaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisciplinaInclude<ExtArgs> | null
  /**
   * The filter to search for the Disciplina to update in case it exists.
   */
  where: Prisma.DisciplinaWhereUniqueInput
  /**
   * In case the Disciplina found by the `where` argument doesn't exist, create a new Disciplina with this data.
   */
  create: Prisma.XOR<Prisma.DisciplinaCreateInput, Prisma.DisciplinaUncheckedCreateInput>
  /**
   * In case the Disciplina was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DisciplinaUpdateInput, Prisma.DisciplinaUncheckedUpdateInput>
}

/**
 * Disciplina delete
 */
export type DisciplinaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Disciplina
   */
  select?: Prisma.DisciplinaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Disciplina
   */
  omit?: Prisma.DisciplinaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisciplinaInclude<ExtArgs> | null
  /**
   * Filter which Disciplina to delete.
   */
  where: Prisma.DisciplinaWhereUniqueInput
}

/**
 * Disciplina deleteMany
 */
export type DisciplinaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Disciplinas to delete
   */
  where?: Prisma.DisciplinaWhereInput
  /**
   * Limit how many Disciplinas to delete.
   */
  limit?: number
}

/**
 * Disciplina.professor
 */
export type Disciplina$professorArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Professor
   */
  select?: Prisma.ProfessorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Professor
   */
  omit?: Prisma.ProfessorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProfessorInclude<ExtArgs> | null
  where?: Prisma.ProfessorWhereInput
}

/**
 * Disciplina.notas
 */
export type Disciplina$notasArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Nota
   */
  select?: Prisma.NotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Nota
   */
  omit?: Prisma.NotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotaInclude<ExtArgs> | null
  where?: Prisma.NotaWhereInput
  orderBy?: Prisma.NotaOrderByWithRelationInput | Prisma.NotaOrderByWithRelationInput[]
  cursor?: Prisma.NotaWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.NotaScalarFieldEnum | Prisma.NotaScalarFieldEnum[]
}

/**
 * Disciplina without action
 */
export type DisciplinaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Disciplina
   */
  select?: Prisma.DisciplinaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Disciplina
   */
  omit?: Prisma.DisciplinaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DisciplinaInclude<ExtArgs> | null
}
