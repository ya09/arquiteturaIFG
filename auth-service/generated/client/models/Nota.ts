
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Nota` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Nota
 * 
 */
export type NotaModel = runtime.Types.Result.DefaultSelection<Prisma.$NotaPayload>

export type AggregateNota = {
  _count: NotaCountAggregateOutputType | null
  _avg: NotaAvgAggregateOutputType | null
  _sum: NotaSumAggregateOutputType | null
  _min: NotaMinAggregateOutputType | null
  _max: NotaMaxAggregateOutputType | null
}

export type NotaAvgAggregateOutputType = {
  id: number | null
  valor: number | null
  alunoId: number | null
  disciplinaId: number | null
  professorId: number | null
}

export type NotaSumAggregateOutputType = {
  id: number | null
  valor: number | null
  alunoId: number | null
  disciplinaId: number | null
  professorId: number | null
}

export type NotaMinAggregateOutputType = {
  id: number | null
  valor: number | null
  alunoId: number | null
  disciplinaId: number | null
  professorId: number | null
}

export type NotaMaxAggregateOutputType = {
  id: number | null
  valor: number | null
  alunoId: number | null
  disciplinaId: number | null
  professorId: number | null
}

export type NotaCountAggregateOutputType = {
  id: number
  valor: number
  alunoId: number
  disciplinaId: number
  professorId: number
  _all: number
}


export type NotaAvgAggregateInputType = {
  id?: true
  valor?: true
  alunoId?: true
  disciplinaId?: true
  professorId?: true
}

export type NotaSumAggregateInputType = {
  id?: true
  valor?: true
  alunoId?: true
  disciplinaId?: true
  professorId?: true
}

export type NotaMinAggregateInputType = {
  id?: true
  valor?: true
  alunoId?: true
  disciplinaId?: true
  professorId?: true
}

export type NotaMaxAggregateInputType = {
  id?: true
  valor?: true
  alunoId?: true
  disciplinaId?: true
  professorId?: true
}

export type NotaCountAggregateInputType = {
  id?: true
  valor?: true
  alunoId?: true
  disciplinaId?: true
  professorId?: true
  _all?: true
}

export type NotaAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Nota to aggregate.
   */
  where?: Prisma.NotaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Notas to fetch.
   */
  orderBy?: Prisma.NotaOrderByWithRelationInput | Prisma.NotaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.NotaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Notas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Notas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Notas
  **/
  _count?: true | NotaCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: NotaAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: NotaSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: NotaMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: NotaMaxAggregateInputType
}

export type GetNotaAggregateType<T extends NotaAggregateArgs> = {
      [P in keyof T & keyof AggregateNota]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateNota[P]>
    : Prisma.GetScalarType<T[P], AggregateNota[P]>
}




export type NotaGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.NotaWhereInput
  orderBy?: Prisma.NotaOrderByWithAggregationInput | Prisma.NotaOrderByWithAggregationInput[]
  by: Prisma.NotaScalarFieldEnum[] | Prisma.NotaScalarFieldEnum
  having?: Prisma.NotaScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: NotaCountAggregateInputType | true
  _avg?: NotaAvgAggregateInputType
  _sum?: NotaSumAggregateInputType
  _min?: NotaMinAggregateInputType
  _max?: NotaMaxAggregateInputType
}

export type NotaGroupByOutputType = {
  id: number
  valor: number
  alunoId: number
  disciplinaId: number
  professorId: number
  _count: NotaCountAggregateOutputType | null
  _avg: NotaAvgAggregateOutputType | null
  _sum: NotaSumAggregateOutputType | null
  _min: NotaMinAggregateOutputType | null
  _max: NotaMaxAggregateOutputType | null
}

type GetNotaGroupByPayload<T extends NotaGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<NotaGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof NotaGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], NotaGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], NotaGroupByOutputType[P]>
      }
    >
  > 



export type NotaWhereInput = {
  AND?: Prisma.NotaWhereInput | Prisma.NotaWhereInput[]
  OR?: Prisma.NotaWhereInput[]
  NOT?: Prisma.NotaWhereInput | Prisma.NotaWhereInput[]
  id?: Prisma.IntFilter<"Nota"> | number
  valor?: Prisma.FloatFilter<"Nota"> | number
  alunoId?: Prisma.IntFilter<"Nota"> | number
  disciplinaId?: Prisma.IntFilter<"Nota"> | number
  professorId?: Prisma.IntFilter<"Nota"> | number
  aluno?: Prisma.XOR<Prisma.AlunoScalarRelationFilter, Prisma.AlunoWhereInput>
  disciplina?: Prisma.XOR<Prisma.DisciplinaScalarRelationFilter, Prisma.DisciplinaWhereInput>
  professor?: Prisma.XOR<Prisma.ProfessorScalarRelationFilter, Prisma.ProfessorWhereInput>
}

export type NotaOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  valor?: Prisma.SortOrder
  alunoId?: Prisma.SortOrder
  disciplinaId?: Prisma.SortOrder
  professorId?: Prisma.SortOrder
  aluno?: Prisma.AlunoOrderByWithRelationInput
  disciplina?: Prisma.DisciplinaOrderByWithRelationInput
  professor?: Prisma.ProfessorOrderByWithRelationInput
}

export type NotaWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.NotaWhereInput | Prisma.NotaWhereInput[]
  OR?: Prisma.NotaWhereInput[]
  NOT?: Prisma.NotaWhereInput | Prisma.NotaWhereInput[]
  valor?: Prisma.FloatFilter<"Nota"> | number
  alunoId?: Prisma.IntFilter<"Nota"> | number
  disciplinaId?: Prisma.IntFilter<"Nota"> | number
  professorId?: Prisma.IntFilter<"Nota"> | number
  aluno?: Prisma.XOR<Prisma.AlunoScalarRelationFilter, Prisma.AlunoWhereInput>
  disciplina?: Prisma.XOR<Prisma.DisciplinaScalarRelationFilter, Prisma.DisciplinaWhereInput>
  professor?: Prisma.XOR<Prisma.ProfessorScalarRelationFilter, Prisma.ProfessorWhereInput>
}, "id">

export type NotaOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  valor?: Prisma.SortOrder
  alunoId?: Prisma.SortOrder
  disciplinaId?: Prisma.SortOrder
  professorId?: Prisma.SortOrder
  _count?: Prisma.NotaCountOrderByAggregateInput
  _avg?: Prisma.NotaAvgOrderByAggregateInput
  _max?: Prisma.NotaMaxOrderByAggregateInput
  _min?: Prisma.NotaMinOrderByAggregateInput
  _sum?: Prisma.NotaSumOrderByAggregateInput
}

export type NotaScalarWhereWithAggregatesInput = {
  AND?: Prisma.NotaScalarWhereWithAggregatesInput | Prisma.NotaScalarWhereWithAggregatesInput[]
  OR?: Prisma.NotaScalarWhereWithAggregatesInput[]
  NOT?: Prisma.NotaScalarWhereWithAggregatesInput | Prisma.NotaScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Nota"> | number
  valor?: Prisma.FloatWithAggregatesFilter<"Nota"> | number
  alunoId?: Prisma.IntWithAggregatesFilter<"Nota"> | number
  disciplinaId?: Prisma.IntWithAggregatesFilter<"Nota"> | number
  professorId?: Prisma.IntWithAggregatesFilter<"Nota"> | number
}

export type NotaCreateInput = {
  valor: number
  aluno: Prisma.AlunoCreateNestedOneWithoutNotasInput
  disciplina: Prisma.DisciplinaCreateNestedOneWithoutNotasInput
  professor: Prisma.ProfessorCreateNestedOneWithoutNotasInput
}

export type NotaUncheckedCreateInput = {
  id?: number
  valor: number
  alunoId: number
  disciplinaId: number
  professorId: number
}

export type NotaUpdateInput = {
  valor?: Prisma.FloatFieldUpdateOperationsInput | number
  aluno?: Prisma.AlunoUpdateOneRequiredWithoutNotasNestedInput
  disciplina?: Prisma.DisciplinaUpdateOneRequiredWithoutNotasNestedInput
  professor?: Prisma.ProfessorUpdateOneRequiredWithoutNotasNestedInput
}

export type NotaUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  valor?: Prisma.FloatFieldUpdateOperationsInput | number
  alunoId?: Prisma.IntFieldUpdateOperationsInput | number
  disciplinaId?: Prisma.IntFieldUpdateOperationsInput | number
  professorId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type NotaCreateManyInput = {
  id?: number
  valor: number
  alunoId: number
  disciplinaId: number
  professorId: number
}

export type NotaUpdateManyMutationInput = {
  valor?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type NotaUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  valor?: Prisma.FloatFieldUpdateOperationsInput | number
  alunoId?: Prisma.IntFieldUpdateOperationsInput | number
  disciplinaId?: Prisma.IntFieldUpdateOperationsInput | number
  professorId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type NotaListRelationFilter = {
  every?: Prisma.NotaWhereInput
  some?: Prisma.NotaWhereInput
  none?: Prisma.NotaWhereInput
}

export type NotaOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NotaCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  valor?: Prisma.SortOrder
  alunoId?: Prisma.SortOrder
  disciplinaId?: Prisma.SortOrder
  professorId?: Prisma.SortOrder
}

export type NotaAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  valor?: Prisma.SortOrder
  alunoId?: Prisma.SortOrder
  disciplinaId?: Prisma.SortOrder
  professorId?: Prisma.SortOrder
}

export type NotaMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  valor?: Prisma.SortOrder
  alunoId?: Prisma.SortOrder
  disciplinaId?: Prisma.SortOrder
  professorId?: Prisma.SortOrder
}

export type NotaMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  valor?: Prisma.SortOrder
  alunoId?: Prisma.SortOrder
  disciplinaId?: Prisma.SortOrder
  professorId?: Prisma.SortOrder
}

export type NotaSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  valor?: Prisma.SortOrder
  alunoId?: Prisma.SortOrder
  disciplinaId?: Prisma.SortOrder
  professorId?: Prisma.SortOrder
}

export type NotaCreateNestedManyWithoutAlunoInput = {
  create?: Prisma.XOR<Prisma.NotaCreateWithoutAlunoInput, Prisma.NotaUncheckedCreateWithoutAlunoInput> | Prisma.NotaCreateWithoutAlunoInput[] | Prisma.NotaUncheckedCreateWithoutAlunoInput[]
  connectOrCreate?: Prisma.NotaCreateOrConnectWithoutAlunoInput | Prisma.NotaCreateOrConnectWithoutAlunoInput[]
  createMany?: Prisma.NotaCreateManyAlunoInputEnvelope
  connect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
}

export type NotaUncheckedCreateNestedManyWithoutAlunoInput = {
  create?: Prisma.XOR<Prisma.NotaCreateWithoutAlunoInput, Prisma.NotaUncheckedCreateWithoutAlunoInput> | Prisma.NotaCreateWithoutAlunoInput[] | Prisma.NotaUncheckedCreateWithoutAlunoInput[]
  connectOrCreate?: Prisma.NotaCreateOrConnectWithoutAlunoInput | Prisma.NotaCreateOrConnectWithoutAlunoInput[]
  createMany?: Prisma.NotaCreateManyAlunoInputEnvelope
  connect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
}

export type NotaUpdateManyWithoutAlunoNestedInput = {
  create?: Prisma.XOR<Prisma.NotaCreateWithoutAlunoInput, Prisma.NotaUncheckedCreateWithoutAlunoInput> | Prisma.NotaCreateWithoutAlunoInput[] | Prisma.NotaUncheckedCreateWithoutAlunoInput[]
  connectOrCreate?: Prisma.NotaCreateOrConnectWithoutAlunoInput | Prisma.NotaCreateOrConnectWithoutAlunoInput[]
  upsert?: Prisma.NotaUpsertWithWhereUniqueWithoutAlunoInput | Prisma.NotaUpsertWithWhereUniqueWithoutAlunoInput[]
  createMany?: Prisma.NotaCreateManyAlunoInputEnvelope
  set?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  disconnect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  delete?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  connect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  update?: Prisma.NotaUpdateWithWhereUniqueWithoutAlunoInput | Prisma.NotaUpdateWithWhereUniqueWithoutAlunoInput[]
  updateMany?: Prisma.NotaUpdateManyWithWhereWithoutAlunoInput | Prisma.NotaUpdateManyWithWhereWithoutAlunoInput[]
  deleteMany?: Prisma.NotaScalarWhereInput | Prisma.NotaScalarWhereInput[]
}

export type NotaUncheckedUpdateManyWithoutAlunoNestedInput = {
  create?: Prisma.XOR<Prisma.NotaCreateWithoutAlunoInput, Prisma.NotaUncheckedCreateWithoutAlunoInput> | Prisma.NotaCreateWithoutAlunoInput[] | Prisma.NotaUncheckedCreateWithoutAlunoInput[]
  connectOrCreate?: Prisma.NotaCreateOrConnectWithoutAlunoInput | Prisma.NotaCreateOrConnectWithoutAlunoInput[]
  upsert?: Prisma.NotaUpsertWithWhereUniqueWithoutAlunoInput | Prisma.NotaUpsertWithWhereUniqueWithoutAlunoInput[]
  createMany?: Prisma.NotaCreateManyAlunoInputEnvelope
  set?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  disconnect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  delete?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  connect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  update?: Prisma.NotaUpdateWithWhereUniqueWithoutAlunoInput | Prisma.NotaUpdateWithWhereUniqueWithoutAlunoInput[]
  updateMany?: Prisma.NotaUpdateManyWithWhereWithoutAlunoInput | Prisma.NotaUpdateManyWithWhereWithoutAlunoInput[]
  deleteMany?: Prisma.NotaScalarWhereInput | Prisma.NotaScalarWhereInput[]
}

export type NotaCreateNestedManyWithoutProfessorInput = {
  create?: Prisma.XOR<Prisma.NotaCreateWithoutProfessorInput, Prisma.NotaUncheckedCreateWithoutProfessorInput> | Prisma.NotaCreateWithoutProfessorInput[] | Prisma.NotaUncheckedCreateWithoutProfessorInput[]
  connectOrCreate?: Prisma.NotaCreateOrConnectWithoutProfessorInput | Prisma.NotaCreateOrConnectWithoutProfessorInput[]
  createMany?: Prisma.NotaCreateManyProfessorInputEnvelope
  connect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
}

export type NotaUncheckedCreateNestedManyWithoutProfessorInput = {
  create?: Prisma.XOR<Prisma.NotaCreateWithoutProfessorInput, Prisma.NotaUncheckedCreateWithoutProfessorInput> | Prisma.NotaCreateWithoutProfessorInput[] | Prisma.NotaUncheckedCreateWithoutProfessorInput[]
  connectOrCreate?: Prisma.NotaCreateOrConnectWithoutProfessorInput | Prisma.NotaCreateOrConnectWithoutProfessorInput[]
  createMany?: Prisma.NotaCreateManyProfessorInputEnvelope
  connect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
}

export type NotaUpdateManyWithoutProfessorNestedInput = {
  create?: Prisma.XOR<Prisma.NotaCreateWithoutProfessorInput, Prisma.NotaUncheckedCreateWithoutProfessorInput> | Prisma.NotaCreateWithoutProfessorInput[] | Prisma.NotaUncheckedCreateWithoutProfessorInput[]
  connectOrCreate?: Prisma.NotaCreateOrConnectWithoutProfessorInput | Prisma.NotaCreateOrConnectWithoutProfessorInput[]
  upsert?: Prisma.NotaUpsertWithWhereUniqueWithoutProfessorInput | Prisma.NotaUpsertWithWhereUniqueWithoutProfessorInput[]
  createMany?: Prisma.NotaCreateManyProfessorInputEnvelope
  set?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  disconnect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  delete?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  connect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  update?: Prisma.NotaUpdateWithWhereUniqueWithoutProfessorInput | Prisma.NotaUpdateWithWhereUniqueWithoutProfessorInput[]
  updateMany?: Prisma.NotaUpdateManyWithWhereWithoutProfessorInput | Prisma.NotaUpdateManyWithWhereWithoutProfessorInput[]
  deleteMany?: Prisma.NotaScalarWhereInput | Prisma.NotaScalarWhereInput[]
}

export type NotaUncheckedUpdateManyWithoutProfessorNestedInput = {
  create?: Prisma.XOR<Prisma.NotaCreateWithoutProfessorInput, Prisma.NotaUncheckedCreateWithoutProfessorInput> | Prisma.NotaCreateWithoutProfessorInput[] | Prisma.NotaUncheckedCreateWithoutProfessorInput[]
  connectOrCreate?: Prisma.NotaCreateOrConnectWithoutProfessorInput | Prisma.NotaCreateOrConnectWithoutProfessorInput[]
  upsert?: Prisma.NotaUpsertWithWhereUniqueWithoutProfessorInput | Prisma.NotaUpsertWithWhereUniqueWithoutProfessorInput[]
  createMany?: Prisma.NotaCreateManyProfessorInputEnvelope
  set?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  disconnect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  delete?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  connect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  update?: Prisma.NotaUpdateWithWhereUniqueWithoutProfessorInput | Prisma.NotaUpdateWithWhereUniqueWithoutProfessorInput[]
  updateMany?: Prisma.NotaUpdateManyWithWhereWithoutProfessorInput | Prisma.NotaUpdateManyWithWhereWithoutProfessorInput[]
  deleteMany?: Prisma.NotaScalarWhereInput | Prisma.NotaScalarWhereInput[]
}

export type NotaCreateNestedManyWithoutDisciplinaInput = {
  create?: Prisma.XOR<Prisma.NotaCreateWithoutDisciplinaInput, Prisma.NotaUncheckedCreateWithoutDisciplinaInput> | Prisma.NotaCreateWithoutDisciplinaInput[] | Prisma.NotaUncheckedCreateWithoutDisciplinaInput[]
  connectOrCreate?: Prisma.NotaCreateOrConnectWithoutDisciplinaInput | Prisma.NotaCreateOrConnectWithoutDisciplinaInput[]
  createMany?: Prisma.NotaCreateManyDisciplinaInputEnvelope
  connect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
}

export type NotaUncheckedCreateNestedManyWithoutDisciplinaInput = {
  create?: Prisma.XOR<Prisma.NotaCreateWithoutDisciplinaInput, Prisma.NotaUncheckedCreateWithoutDisciplinaInput> | Prisma.NotaCreateWithoutDisciplinaInput[] | Prisma.NotaUncheckedCreateWithoutDisciplinaInput[]
  connectOrCreate?: Prisma.NotaCreateOrConnectWithoutDisciplinaInput | Prisma.NotaCreateOrConnectWithoutDisciplinaInput[]
  createMany?: Prisma.NotaCreateManyDisciplinaInputEnvelope
  connect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
}

export type NotaUpdateManyWithoutDisciplinaNestedInput = {
  create?: Prisma.XOR<Prisma.NotaCreateWithoutDisciplinaInput, Prisma.NotaUncheckedCreateWithoutDisciplinaInput> | Prisma.NotaCreateWithoutDisciplinaInput[] | Prisma.NotaUncheckedCreateWithoutDisciplinaInput[]
  connectOrCreate?: Prisma.NotaCreateOrConnectWithoutDisciplinaInput | Prisma.NotaCreateOrConnectWithoutDisciplinaInput[]
  upsert?: Prisma.NotaUpsertWithWhereUniqueWithoutDisciplinaInput | Prisma.NotaUpsertWithWhereUniqueWithoutDisciplinaInput[]
  createMany?: Prisma.NotaCreateManyDisciplinaInputEnvelope
  set?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  disconnect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  delete?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  connect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  update?: Prisma.NotaUpdateWithWhereUniqueWithoutDisciplinaInput | Prisma.NotaUpdateWithWhereUniqueWithoutDisciplinaInput[]
  updateMany?: Prisma.NotaUpdateManyWithWhereWithoutDisciplinaInput | Prisma.NotaUpdateManyWithWhereWithoutDisciplinaInput[]
  deleteMany?: Prisma.NotaScalarWhereInput | Prisma.NotaScalarWhereInput[]
}

export type NotaUncheckedUpdateManyWithoutDisciplinaNestedInput = {
  create?: Prisma.XOR<Prisma.NotaCreateWithoutDisciplinaInput, Prisma.NotaUncheckedCreateWithoutDisciplinaInput> | Prisma.NotaCreateWithoutDisciplinaInput[] | Prisma.NotaUncheckedCreateWithoutDisciplinaInput[]
  connectOrCreate?: Prisma.NotaCreateOrConnectWithoutDisciplinaInput | Prisma.NotaCreateOrConnectWithoutDisciplinaInput[]
  upsert?: Prisma.NotaUpsertWithWhereUniqueWithoutDisciplinaInput | Prisma.NotaUpsertWithWhereUniqueWithoutDisciplinaInput[]
  createMany?: Prisma.NotaCreateManyDisciplinaInputEnvelope
  set?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  disconnect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  delete?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  connect?: Prisma.NotaWhereUniqueInput | Prisma.NotaWhereUniqueInput[]
  update?: Prisma.NotaUpdateWithWhereUniqueWithoutDisciplinaInput | Prisma.NotaUpdateWithWhereUniqueWithoutDisciplinaInput[]
  updateMany?: Prisma.NotaUpdateManyWithWhereWithoutDisciplinaInput | Prisma.NotaUpdateManyWithWhereWithoutDisciplinaInput[]
  deleteMany?: Prisma.NotaScalarWhereInput | Prisma.NotaScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NotaCreateWithoutAlunoInput = {
  valor: number
  disciplina: Prisma.DisciplinaCreateNestedOneWithoutNotasInput
  professor: Prisma.ProfessorCreateNestedOneWithoutNotasInput
}

export type NotaUncheckedCreateWithoutAlunoInput = {
  id?: number
  valor: number
  disciplinaId: number
  professorId: number
}

export type NotaCreateOrConnectWithoutAlunoInput = {
  where: Prisma.NotaWhereUniqueInput
  create: Prisma.XOR<Prisma.NotaCreateWithoutAlunoInput, Prisma.NotaUncheckedCreateWithoutAlunoInput>
}

export type NotaCreateManyAlunoInputEnvelope = {
  data: Prisma.NotaCreateManyAlunoInput | Prisma.NotaCreateManyAlunoInput[]
  skipDuplicates?: boolean
}

export type NotaUpsertWithWhereUniqueWithoutAlunoInput = {
  where: Prisma.NotaWhereUniqueInput
  update: Prisma.XOR<Prisma.NotaUpdateWithoutAlunoInput, Prisma.NotaUncheckedUpdateWithoutAlunoInput>
  create: Prisma.XOR<Prisma.NotaCreateWithoutAlunoInput, Prisma.NotaUncheckedCreateWithoutAlunoInput>
}

export type NotaUpdateWithWhereUniqueWithoutAlunoInput = {
  where: Prisma.NotaWhereUniqueInput
  data: Prisma.XOR<Prisma.NotaUpdateWithoutAlunoInput, Prisma.NotaUncheckedUpdateWithoutAlunoInput>
}

export type NotaUpdateManyWithWhereWithoutAlunoInput = {
  where: Prisma.NotaScalarWhereInput
  data: Prisma.XOR<Prisma.NotaUpdateManyMutationInput, Prisma.NotaUncheckedUpdateManyWithoutAlunoInput>
}

export type NotaScalarWhereInput = {
  AND?: Prisma.NotaScalarWhereInput | Prisma.NotaScalarWhereInput[]
  OR?: Prisma.NotaScalarWhereInput[]
  NOT?: Prisma.NotaScalarWhereInput | Prisma.NotaScalarWhereInput[]
  id?: Prisma.IntFilter<"Nota"> | number
  valor?: Prisma.FloatFilter<"Nota"> | number
  alunoId?: Prisma.IntFilter<"Nota"> | number
  disciplinaId?: Prisma.IntFilter<"Nota"> | number
  professorId?: Prisma.IntFilter<"Nota"> | number
}

export type NotaCreateWithoutProfessorInput = {
  valor: number
  aluno: Prisma.AlunoCreateNestedOneWithoutNotasInput
  disciplina: Prisma.DisciplinaCreateNestedOneWithoutNotasInput
}

export type NotaUncheckedCreateWithoutProfessorInput = {
  id?: number
  valor: number
  alunoId: number
  disciplinaId: number
}

export type NotaCreateOrConnectWithoutProfessorInput = {
  where: Prisma.NotaWhereUniqueInput
  create: Prisma.XOR<Prisma.NotaCreateWithoutProfessorInput, Prisma.NotaUncheckedCreateWithoutProfessorInput>
}

export type NotaCreateManyProfessorInputEnvelope = {
  data: Prisma.NotaCreateManyProfessorInput | Prisma.NotaCreateManyProfessorInput[]
  skipDuplicates?: boolean
}

export type NotaUpsertWithWhereUniqueWithoutProfessorInput = {
  where: Prisma.NotaWhereUniqueInput
  update: Prisma.XOR<Prisma.NotaUpdateWithoutProfessorInput, Prisma.NotaUncheckedUpdateWithoutProfessorInput>
  create: Prisma.XOR<Prisma.NotaCreateWithoutProfessorInput, Prisma.NotaUncheckedCreateWithoutProfessorInput>
}

export type NotaUpdateWithWhereUniqueWithoutProfessorInput = {
  where: Prisma.NotaWhereUniqueInput
  data: Prisma.XOR<Prisma.NotaUpdateWithoutProfessorInput, Prisma.NotaUncheckedUpdateWithoutProfessorInput>
}

export type NotaUpdateManyWithWhereWithoutProfessorInput = {
  where: Prisma.NotaScalarWhereInput
  data: Prisma.XOR<Prisma.NotaUpdateManyMutationInput, Prisma.NotaUncheckedUpdateManyWithoutProfessorInput>
}

export type NotaCreateWithoutDisciplinaInput = {
  valor: number
  aluno: Prisma.AlunoCreateNestedOneWithoutNotasInput
  professor: Prisma.ProfessorCreateNestedOneWithoutNotasInput
}

export type NotaUncheckedCreateWithoutDisciplinaInput = {
  id?: number
  valor: number
  alunoId: number
  professorId: number
}

export type NotaCreateOrConnectWithoutDisciplinaInput = {
  where: Prisma.NotaWhereUniqueInput
  create: Prisma.XOR<Prisma.NotaCreateWithoutDisciplinaInput, Prisma.NotaUncheckedCreateWithoutDisciplinaInput>
}

export type NotaCreateManyDisciplinaInputEnvelope = {
  data: Prisma.NotaCreateManyDisciplinaInput | Prisma.NotaCreateManyDisciplinaInput[]
  skipDuplicates?: boolean
}

export type NotaUpsertWithWhereUniqueWithoutDisciplinaInput = {
  where: Prisma.NotaWhereUniqueInput
  update: Prisma.XOR<Prisma.NotaUpdateWithoutDisciplinaInput, Prisma.NotaUncheckedUpdateWithoutDisciplinaInput>
  create: Prisma.XOR<Prisma.NotaCreateWithoutDisciplinaInput, Prisma.NotaUncheckedCreateWithoutDisciplinaInput>
}

export type NotaUpdateWithWhereUniqueWithoutDisciplinaInput = {
  where: Prisma.NotaWhereUniqueInput
  data: Prisma.XOR<Prisma.NotaUpdateWithoutDisciplinaInput, Prisma.NotaUncheckedUpdateWithoutDisciplinaInput>
}

export type NotaUpdateManyWithWhereWithoutDisciplinaInput = {
  where: Prisma.NotaScalarWhereInput
  data: Prisma.XOR<Prisma.NotaUpdateManyMutationInput, Prisma.NotaUncheckedUpdateManyWithoutDisciplinaInput>
}

export type NotaCreateManyAlunoInput = {
  id?: number
  valor: number
  disciplinaId: number
  professorId: number
}

export type NotaUpdateWithoutAlunoInput = {
  valor?: Prisma.FloatFieldUpdateOperationsInput | number
  disciplina?: Prisma.DisciplinaUpdateOneRequiredWithoutNotasNestedInput
  professor?: Prisma.ProfessorUpdateOneRequiredWithoutNotasNestedInput
}

export type NotaUncheckedUpdateWithoutAlunoInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  valor?: Prisma.FloatFieldUpdateOperationsInput | number
  disciplinaId?: Prisma.IntFieldUpdateOperationsInput | number
  professorId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type NotaUncheckedUpdateManyWithoutAlunoInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  valor?: Prisma.FloatFieldUpdateOperationsInput | number
  disciplinaId?: Prisma.IntFieldUpdateOperationsInput | number
  professorId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type NotaCreateManyProfessorInput = {
  id?: number
  valor: number
  alunoId: number
  disciplinaId: number
}

export type NotaUpdateWithoutProfessorInput = {
  valor?: Prisma.FloatFieldUpdateOperationsInput | number
  aluno?: Prisma.AlunoUpdateOneRequiredWithoutNotasNestedInput
  disciplina?: Prisma.DisciplinaUpdateOneRequiredWithoutNotasNestedInput
}

export type NotaUncheckedUpdateWithoutProfessorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  valor?: Prisma.FloatFieldUpdateOperationsInput | number
  alunoId?: Prisma.IntFieldUpdateOperationsInput | number
  disciplinaId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type NotaUncheckedUpdateManyWithoutProfessorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  valor?: Prisma.FloatFieldUpdateOperationsInput | number
  alunoId?: Prisma.IntFieldUpdateOperationsInput | number
  disciplinaId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type NotaCreateManyDisciplinaInput = {
  id?: number
  valor: number
  alunoId: number
  professorId: number
}

export type NotaUpdateWithoutDisciplinaInput = {
  valor?: Prisma.FloatFieldUpdateOperationsInput | number
  aluno?: Prisma.AlunoUpdateOneRequiredWithoutNotasNestedInput
  professor?: Prisma.ProfessorUpdateOneRequiredWithoutNotasNestedInput
}

export type NotaUncheckedUpdateWithoutDisciplinaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  valor?: Prisma.FloatFieldUpdateOperationsInput | number
  alunoId?: Prisma.IntFieldUpdateOperationsInput | number
  professorId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type NotaUncheckedUpdateManyWithoutDisciplinaInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  valor?: Prisma.FloatFieldUpdateOperationsInput | number
  alunoId?: Prisma.IntFieldUpdateOperationsInput | number
  professorId?: Prisma.IntFieldUpdateOperationsInput | number
}



export type NotaSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  valor?: boolean
  alunoId?: boolean
  disciplinaId?: boolean
  professorId?: boolean
  aluno?: boolean | Prisma.AlunoDefaultArgs<ExtArgs>
  disciplina?: boolean | Prisma.DisciplinaDefaultArgs<ExtArgs>
  professor?: boolean | Prisma.ProfessorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["nota"]>



export type NotaSelectScalar = {
  id?: boolean
  valor?: boolean
  alunoId?: boolean
  disciplinaId?: boolean
  professorId?: boolean
}

export type NotaOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "valor" | "alunoId" | "disciplinaId" | "professorId", ExtArgs["result"]["nota"]>
export type NotaInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  aluno?: boolean | Prisma.AlunoDefaultArgs<ExtArgs>
  disciplina?: boolean | Prisma.DisciplinaDefaultArgs<ExtArgs>
  professor?: boolean | Prisma.ProfessorDefaultArgs<ExtArgs>
}

export type $NotaPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Nota"
  objects: {
    aluno: Prisma.$AlunoPayload<ExtArgs>
    disciplina: Prisma.$DisciplinaPayload<ExtArgs>
    professor: Prisma.$ProfessorPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    valor: number
    alunoId: number
    disciplinaId: number
    professorId: number
  }, ExtArgs["result"]["nota"]>
  composites: {}
}

export type NotaGetPayload<S extends boolean | null | undefined | NotaDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$NotaPayload, S>

export type NotaCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<NotaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: NotaCountAggregateInputType | true
  }

export interface NotaDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Nota'], meta: { name: 'Nota' } }
  /**
   * Find zero or one Nota that matches the filter.
   * @param {NotaFindUniqueArgs} args - Arguments to find a Nota
   * @example
   * // Get one Nota
   * const nota = await prisma.nota.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends NotaFindUniqueArgs>(args: Prisma.SelectSubset<T, NotaFindUniqueArgs<ExtArgs>>): Prisma.Prisma__NotaClient<runtime.Types.Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Nota that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {NotaFindUniqueOrThrowArgs} args - Arguments to find a Nota
   * @example
   * // Get one Nota
   * const nota = await prisma.nota.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends NotaFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, NotaFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__NotaClient<runtime.Types.Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Nota that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotaFindFirstArgs} args - Arguments to find a Nota
   * @example
   * // Get one Nota
   * const nota = await prisma.nota.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends NotaFindFirstArgs>(args?: Prisma.SelectSubset<T, NotaFindFirstArgs<ExtArgs>>): Prisma.Prisma__NotaClient<runtime.Types.Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Nota that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotaFindFirstOrThrowArgs} args - Arguments to find a Nota
   * @example
   * // Get one Nota
   * const nota = await prisma.nota.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends NotaFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, NotaFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__NotaClient<runtime.Types.Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Notas that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotaFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Notas
   * const notas = await prisma.nota.findMany()
   * 
   * // Get first 10 Notas
   * const notas = await prisma.nota.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const notaWithIdOnly = await prisma.nota.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends NotaFindManyArgs>(args?: Prisma.SelectSubset<T, NotaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Nota.
   * @param {NotaCreateArgs} args - Arguments to create a Nota.
   * @example
   * // Create one Nota
   * const Nota = await prisma.nota.create({
   *   data: {
   *     // ... data to create a Nota
   *   }
   * })
   * 
   */
  create<T extends NotaCreateArgs>(args: Prisma.SelectSubset<T, NotaCreateArgs<ExtArgs>>): Prisma.Prisma__NotaClient<runtime.Types.Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Notas.
   * @param {NotaCreateManyArgs} args - Arguments to create many Notas.
   * @example
   * // Create many Notas
   * const nota = await prisma.nota.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends NotaCreateManyArgs>(args?: Prisma.SelectSubset<T, NotaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Nota.
   * @param {NotaDeleteArgs} args - Arguments to delete one Nota.
   * @example
   * // Delete one Nota
   * const Nota = await prisma.nota.delete({
   *   where: {
   *     // ... filter to delete one Nota
   *   }
   * })
   * 
   */
  delete<T extends NotaDeleteArgs>(args: Prisma.SelectSubset<T, NotaDeleteArgs<ExtArgs>>): Prisma.Prisma__NotaClient<runtime.Types.Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Nota.
   * @param {NotaUpdateArgs} args - Arguments to update one Nota.
   * @example
   * // Update one Nota
   * const nota = await prisma.nota.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends NotaUpdateArgs>(args: Prisma.SelectSubset<T, NotaUpdateArgs<ExtArgs>>): Prisma.Prisma__NotaClient<runtime.Types.Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Notas.
   * @param {NotaDeleteManyArgs} args - Arguments to filter Notas to delete.
   * @example
   * // Delete a few Notas
   * const { count } = await prisma.nota.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends NotaDeleteManyArgs>(args?: Prisma.SelectSubset<T, NotaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Notas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotaUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Notas
   * const nota = await prisma.nota.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends NotaUpdateManyArgs>(args: Prisma.SelectSubset<T, NotaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Nota.
   * @param {NotaUpsertArgs} args - Arguments to update or create a Nota.
   * @example
   * // Update or create a Nota
   * const nota = await prisma.nota.upsert({
   *   create: {
   *     // ... data to create a Nota
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Nota we want to update
   *   }
   * })
   */
  upsert<T extends NotaUpsertArgs>(args: Prisma.SelectSubset<T, NotaUpsertArgs<ExtArgs>>): Prisma.Prisma__NotaClient<runtime.Types.Result.GetResult<Prisma.$NotaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Notas.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotaCountArgs} args - Arguments to filter Notas to count.
   * @example
   * // Count the number of Notas
   * const count = await prisma.nota.count({
   *   where: {
   *     // ... the filter for the Notas we want to count
   *   }
   * })
  **/
  count<T extends NotaCountArgs>(
    args?: Prisma.Subset<T, NotaCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], NotaCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Nota.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends NotaAggregateArgs>(args: Prisma.Subset<T, NotaAggregateArgs>): Prisma.PrismaPromise<GetNotaAggregateType<T>>

  /**
   * Group by Nota.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {NotaGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends NotaGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: NotaGroupByArgs['orderBy'] }
      : { orderBy?: NotaGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, NotaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Nota model
 */
readonly fields: NotaFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Nota.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__NotaClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  aluno<T extends Prisma.AlunoDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AlunoDefaultArgs<ExtArgs>>): Prisma.Prisma__AlunoClient<runtime.Types.Result.GetResult<Prisma.$AlunoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  disciplina<T extends Prisma.DisciplinaDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DisciplinaDefaultArgs<ExtArgs>>): Prisma.Prisma__DisciplinaClient<runtime.Types.Result.GetResult<Prisma.$DisciplinaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  professor<T extends Prisma.ProfessorDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProfessorDefaultArgs<ExtArgs>>): Prisma.Prisma__ProfessorClient<runtime.Types.Result.GetResult<Prisma.$ProfessorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Nota model
 */
export interface NotaFieldRefs {
  readonly id: Prisma.FieldRef<"Nota", 'Int'>
  readonly valor: Prisma.FieldRef<"Nota", 'Float'>
  readonly alunoId: Prisma.FieldRef<"Nota", 'Int'>
  readonly disciplinaId: Prisma.FieldRef<"Nota", 'Int'>
  readonly professorId: Prisma.FieldRef<"Nota", 'Int'>
}
    

// Custom InputTypes
/**
 * Nota findUnique
 */
export type NotaFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Nota
   */
  select?: Prisma.NotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Nota
   */
  omit?: Prisma.NotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotaInclude<ExtArgs> | null
  /**
   * Filter, which Nota to fetch.
   */
  where: Prisma.NotaWhereUniqueInput
}

/**
 * Nota findUniqueOrThrow
 */
export type NotaFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Nota
   */
  select?: Prisma.NotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Nota
   */
  omit?: Prisma.NotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotaInclude<ExtArgs> | null
  /**
   * Filter, which Nota to fetch.
   */
  where: Prisma.NotaWhereUniqueInput
}

/**
 * Nota findFirst
 */
export type NotaFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Nota
   */
  select?: Prisma.NotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Nota
   */
  omit?: Prisma.NotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotaInclude<ExtArgs> | null
  /**
   * Filter, which Nota to fetch.
   */
  where?: Prisma.NotaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Notas to fetch.
   */
  orderBy?: Prisma.NotaOrderByWithRelationInput | Prisma.NotaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Notas.
   */
  cursor?: Prisma.NotaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Notas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Notas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Notas.
   */
  distinct?: Prisma.NotaScalarFieldEnum | Prisma.NotaScalarFieldEnum[]
}

/**
 * Nota findFirstOrThrow
 */
export type NotaFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Nota
   */
  select?: Prisma.NotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Nota
   */
  omit?: Prisma.NotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotaInclude<ExtArgs> | null
  /**
   * Filter, which Nota to fetch.
   */
  where?: Prisma.NotaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Notas to fetch.
   */
  orderBy?: Prisma.NotaOrderByWithRelationInput | Prisma.NotaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Notas.
   */
  cursor?: Prisma.NotaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Notas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Notas.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Notas.
   */
  distinct?: Prisma.NotaScalarFieldEnum | Prisma.NotaScalarFieldEnum[]
}

/**
 * Nota findMany
 */
export type NotaFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Nota
   */
  select?: Prisma.NotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Nota
   */
  omit?: Prisma.NotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotaInclude<ExtArgs> | null
  /**
   * Filter, which Notas to fetch.
   */
  where?: Prisma.NotaWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Notas to fetch.
   */
  orderBy?: Prisma.NotaOrderByWithRelationInput | Prisma.NotaOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Notas.
   */
  cursor?: Prisma.NotaWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Notas from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Notas.
   */
  skip?: number
  distinct?: Prisma.NotaScalarFieldEnum | Prisma.NotaScalarFieldEnum[]
}

/**
 * Nota create
 */
export type NotaCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Nota
   */
  select?: Prisma.NotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Nota
   */
  omit?: Prisma.NotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotaInclude<ExtArgs> | null
  /**
   * The data needed to create a Nota.
   */
  data: Prisma.XOR<Prisma.NotaCreateInput, Prisma.NotaUncheckedCreateInput>
}

/**
 * Nota createMany
 */
export type NotaCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Notas.
   */
  data: Prisma.NotaCreateManyInput | Prisma.NotaCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Nota update
 */
export type NotaUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Nota
   */
  select?: Prisma.NotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Nota
   */
  omit?: Prisma.NotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotaInclude<ExtArgs> | null
  /**
   * The data needed to update a Nota.
   */
  data: Prisma.XOR<Prisma.NotaUpdateInput, Prisma.NotaUncheckedUpdateInput>
  /**
   * Choose, which Nota to update.
   */
  where: Prisma.NotaWhereUniqueInput
}

/**
 * Nota updateMany
 */
export type NotaUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Notas.
   */
  data: Prisma.XOR<Prisma.NotaUpdateManyMutationInput, Prisma.NotaUncheckedUpdateManyInput>
  /**
   * Filter which Notas to update
   */
  where?: Prisma.NotaWhereInput
  /**
   * Limit how many Notas to update.
   */
  limit?: number
}

/**
 * Nota upsert
 */
export type NotaUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Nota
   */
  select?: Prisma.NotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Nota
   */
  omit?: Prisma.NotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotaInclude<ExtArgs> | null
  /**
   * The filter to search for the Nota to update in case it exists.
   */
  where: Prisma.NotaWhereUniqueInput
  /**
   * In case the Nota found by the `where` argument doesn't exist, create a new Nota with this data.
   */
  create: Prisma.XOR<Prisma.NotaCreateInput, Prisma.NotaUncheckedCreateInput>
  /**
   * In case the Nota was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.NotaUpdateInput, Prisma.NotaUncheckedUpdateInput>
}

/**
 * Nota delete
 */
export type NotaDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Nota
   */
  select?: Prisma.NotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Nota
   */
  omit?: Prisma.NotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotaInclude<ExtArgs> | null
  /**
   * Filter which Nota to delete.
   */
  where: Prisma.NotaWhereUniqueInput
}

/**
 * Nota deleteMany
 */
export type NotaDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Notas to delete
   */
  where?: Prisma.NotaWhereInput
  /**
   * Limit how many Notas to delete.
   */
  limit?: number
}

/**
 * Nota without action
 */
export type NotaDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Nota
   */
  select?: Prisma.NotaSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Nota
   */
  omit?: Prisma.NotaOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotaInclude<ExtArgs> | null
}
